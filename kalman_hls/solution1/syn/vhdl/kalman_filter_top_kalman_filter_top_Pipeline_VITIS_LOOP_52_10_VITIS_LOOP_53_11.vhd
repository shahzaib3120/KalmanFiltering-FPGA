-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kalman_filter_top_kalman_filter_top_Pipeline_VITIS_LOOP_52_10_VITIS_LOOP_53_11 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    P_prior_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    P_prior_V_ce0 : OUT STD_LOGIC;
    P_prior_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_prior_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    P_prior_V_ce1 : OUT STD_LOGIC;
    P_prior_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_prior_V_address2 : OUT STD_LOGIC_VECTOR (3 downto 0);
    P_prior_V_ce2 : OUT STD_LOGIC;
    P_prior_V_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_prior_V_address3 : OUT STD_LOGIC_VECTOR (3 downto 0);
    P_prior_V_ce3 : OUT STD_LOGIC;
    P_prior_V_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_V_1_1_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    S_V_1_1_1_out_ap_vld : OUT STD_LOGIC;
    S_V_1_0_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    S_V_1_0_1_out_ap_vld : OUT STD_LOGIC;
    S_V_0_1_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    S_V_0_1_1_out_ap_vld : OUT STD_LOGIC;
    S_V_0_0_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    S_V_0_0_1_out_ap_vld : OUT STD_LOGIC;
    H_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    H_ce0 : OUT STD_LOGIC;
    H_q0 : IN STD_LOGIC_VECTOR (16 downto 0);
    H_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    H_ce1 : OUT STD_LOGIC;
    H_q1 : IN STD_LOGIC_VECTOR (16 downto 0);
    H_address2 : OUT STD_LOGIC_VECTOR (2 downto 0);
    H_ce2 : OUT STD_LOGIC;
    H_q2 : IN STD_LOGIC_VECTOR (16 downto 0);
    H_address3 : OUT STD_LOGIC_VECTOR (2 downto 0);
    H_ce3 : OUT STD_LOGIC;
    H_q3 : IN STD_LOGIC_VECTOR (16 downto 0);
    grp_fu_793_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_793_p_din1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    grp_fu_793_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
    grp_fu_793_p_ce : OUT STD_LOGIC;
    grp_fu_797_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_797_p_din1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    grp_fu_797_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
    grp_fu_797_p_ce : OUT STD_LOGIC;
    grp_fu_801_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_801_p_din1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    grp_fu_801_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
    grp_fu_801_p_ce : OUT STD_LOGIC;
    grp_fu_805_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_805_p_din1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    grp_fu_805_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
    grp_fu_805_p_ce : OUT STD_LOGIC );
end;


architecture behav of kalman_filter_top_kalman_filter_top_Pipeline_VITIS_LOOP_52_10_VITIS_LOOP_53_11 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv12_999 : STD_LOGIC_VECTOR (11 downto 0) := "100110011001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln52_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln52_reg_765 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_765_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_765_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_765_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_1_fu_314_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_1_reg_769 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_1_reg_769_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_1_reg_769_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_1_reg_769_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_1_reg_769_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_8_fu_369_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln52_8_reg_793 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln54_fu_417_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_reg_818 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_reg_818_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_reg_818_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_reg_818_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_reg_818_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal H_load_reg_828 : STD_LOGIC_VECTOR (16 downto 0);
    signal H_load_2_reg_833 : STD_LOGIC_VECTOR (16 downto 0);
    signal H_load_3_reg_838 : STD_LOGIC_VECTOR (16 downto 0);
    signal P_prior_V_load_1_reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal P_prior_V_load_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal P_prior_V_load_2_reg_858 : STD_LOGIC_VECTOR (31 downto 0);
    signal P_prior_V_load_3_reg_863 : STD_LOGIC_VECTOR (31 downto 0);
    signal P_prior_V_load_3_reg_863_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln52_1_fu_452_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln52_2_fu_455_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln52_3_fu_458_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal H_load_4_reg_883 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln818_fu_461_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1347_fu_470_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1347_1_fu_479_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln52_4_fu_488_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln1347_reg_908 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_s_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1347_1_reg_918 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1347_2_fu_501_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln1347_2_reg_928 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_3_reg_933 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln52_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1271_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_2_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_2_cast_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1273_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1273_2_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1273_3_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_3_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_72 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln53_fu_421_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (1 downto 0);
    signal S_V_1_1_1_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_V_1_1_19_fu_673_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_V_1_1_9_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_V_1_1_18_fu_666_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_V_1_1_10_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_V_1_1_17_fu_659_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_V_1_1_11_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_V_1_1_16_fu_652_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_92 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln52_1_fu_306_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_i_4 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten27_fu_96 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln52_1_fu_265_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_indvar_flatten27_load : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln1271_fu_247_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_fu_274_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln53_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_fu_280_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_cast_fu_298_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_26_cast_fu_251_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln52_2_fu_318_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln52_6_fu_331_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln52_fu_339_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln52_7_fu_350_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln52_1_fu_358_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln52_fu_290_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_34_cast_fu_382_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_35_cast_fu_395_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln1273_fu_408_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln52_2_fu_442_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln838_s_fu_510_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln1347_fu_517_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_2_fu_522_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln838_2_fu_532_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln1347_2_fu_540_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal shl_ln838_3_fu_567_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln1347_3_fu_574_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal select_ln813_1_fu_589_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln813_fu_596_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln54_fu_603_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln813_fu_610_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln813_fu_614_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln818_1_fu_579_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_V_1_0_fu_618_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_V_1_1_13_fu_624_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_V_1_1_14_fu_631_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_V_1_1_fu_638_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_V_1_1_15_fu_645_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kalman_filter_top_mul_32s_17ns_48_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component kalman_filter_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component kalman_filter_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    i_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln52_fu_259_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_92 <= select_ln52_1_fu_306_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_92 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten27_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln52_fu_259_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten27_fu_96 <= add_ln52_1_fu_265_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten27_fu_96 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln52_fu_259_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_72 <= add_ln53_fu_421_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_72 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                H_load_2_reg_833 <= H_q2;
                H_load_3_reg_838 <= H_q1;
                H_load_reg_828 <= H_q3;
                P_prior_V_load_1_reg_848 <= P_prior_V_q3;
                P_prior_V_load_2_reg_858 <= P_prior_V_q1;
                P_prior_V_load_3_reg_863 <= P_prior_V_q0;
                P_prior_V_load_reg_853 <= P_prior_V_q2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                H_load_4_reg_883 <= H_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                P_prior_V_load_3_reg_863_pp0_iter2_reg <= P_prior_V_load_3_reg_863;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                icmp_ln52_reg_765_pp0_iter2_reg <= icmp_ln52_reg_765_pp0_iter1_reg;
                icmp_ln52_reg_765_pp0_iter3_reg <= icmp_ln52_reg_765_pp0_iter2_reg;
                mul_ln1347_1_reg_918 <= grp_fu_801_p_dout0;
                mul_ln1347_2_reg_928 <= grp_fu_805_p_dout0;
                mul_ln1347_reg_908 <= grp_fu_797_p_dout0;
                tmp_3_reg_933 <= add_ln1347_2_fu_540_p2(47 downto 16);
                tmp_s_reg_913 <= grp_fu_793_p_dout0(47 downto 16);
                trunc_ln52_1_reg_769_pp0_iter2_reg <= trunc_ln52_1_reg_769_pp0_iter1_reg;
                trunc_ln52_1_reg_769_pp0_iter3_reg <= trunc_ln52_1_reg_769_pp0_iter2_reg;
                trunc_ln52_1_reg_769_pp0_iter4_reg <= trunc_ln52_1_reg_769_pp0_iter3_reg;
                trunc_ln54_reg_818_pp0_iter2_reg <= trunc_ln54_reg_818_pp0_iter1_reg;
                trunc_ln54_reg_818_pp0_iter3_reg <= trunc_ln54_reg_818_pp0_iter2_reg;
                trunc_ln54_reg_818_pp0_iter4_reg <= trunc_ln54_reg_818_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                S_V_1_1_10_fu_84 <= S_V_1_1_17_fu_659_p3;
                S_V_1_1_11_fu_88 <= S_V_1_1_16_fu_652_p3;
                S_V_1_1_1_fu_76 <= S_V_1_1_19_fu_673_p3;
                S_V_1_1_9_fu_80 <= S_V_1_1_18_fu_666_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln52_reg_765 <= icmp_ln52_fu_259_p2;
                icmp_ln52_reg_765_pp0_iter1_reg <= icmp_ln52_reg_765;
                trunc_ln52_1_reg_769_pp0_iter1_reg <= trunc_ln52_1_reg_769;
                trunc_ln54_reg_818_pp0_iter1_reg <= trunc_ln54_reg_818;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_259_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    select_ln52_8_reg_793(2) <= select_ln52_8_fu_369_p3(2);
                trunc_ln52_1_reg_769 <= trunc_ln52_1_fu_314_p1;
                trunc_ln54_reg_818 <= trunc_ln54_fu_417_p1;
            end if;
        end if;
    end process;
    select_ln52_8_reg_793(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    H_address0 <= zext_ln1271_3_fu_447_p1(3 - 1 downto 0);
    H_address1 <= zext_ln1271_2_fu_364_p1(3 - 1 downto 0);
    H_address2 <= zext_ln1271_fu_345_p1(3 - 1 downto 0);
    H_address3 <= zext_ln52_fu_326_p1(3 - 1 downto 0);

    H_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            H_ce0 <= ap_const_logic_1;
        else 
            H_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    H_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            H_ce1 <= ap_const_logic_1;
        else 
            H_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    H_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            H_ce2 <= ap_const_logic_1;
        else 
            H_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    H_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            H_ce3 <= ap_const_logic_1;
        else 
            H_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    P_prior_V_address0 <= zext_ln1273_3_fu_412_p1(4 - 1 downto 0);
    P_prior_V_address1 <= zext_ln1273_2_fu_403_p1(4 - 1 downto 0);
    P_prior_V_address2 <= zext_ln1273_fu_390_p1(4 - 1 downto 0);
    P_prior_V_address3 <= j_2_cast_fu_377_p1(4 - 1 downto 0);

    P_prior_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            P_prior_V_ce0 <= ap_const_logic_1;
        else 
            P_prior_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    P_prior_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            P_prior_V_ce1 <= ap_const_logic_1;
        else 
            P_prior_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    P_prior_V_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            P_prior_V_ce2 <= ap_const_logic_1;
        else 
            P_prior_V_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    P_prior_V_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            P_prior_V_ce3 <= ap_const_logic_1;
        else 
            P_prior_V_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    S_V_0_0_1_out <= S_V_1_1_1_fu_76;

    S_V_0_0_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln52_reg_765_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln52_reg_765_pp0_iter3_reg = ap_const_lv1_1))) then 
            S_V_0_0_1_out_ap_vld <= ap_const_logic_1;
        else 
            S_V_0_0_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    S_V_0_1_1_out <= S_V_1_1_9_fu_80;

    S_V_0_1_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln52_reg_765_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln52_reg_765_pp0_iter3_reg = ap_const_lv1_1))) then 
            S_V_0_1_1_out_ap_vld <= ap_const_logic_1;
        else 
            S_V_0_1_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    S_V_1_0_1_out <= S_V_1_1_10_fu_84;

    S_V_1_0_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln52_reg_765_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln52_reg_765_pp0_iter3_reg = ap_const_lv1_1))) then 
            S_V_1_0_1_out_ap_vld <= ap_const_logic_1;
        else 
            S_V_1_0_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    S_V_1_0_fu_618_p2 <= std_logic_vector(unsigned(zext_ln813_fu_614_p1) + unsigned(trunc_ln818_1_fu_579_p4));
    S_V_1_1_13_fu_624_p3 <= 
        S_V_1_0_fu_618_p2 when (trunc_ln54_reg_818_pp0_iter4_reg(0) = '1') else 
        S_V_1_1_11_fu_88;
    S_V_1_1_14_fu_631_p3 <= 
        S_V_1_1_10_fu_84 when (trunc_ln54_reg_818_pp0_iter4_reg(0) = '1') else 
        S_V_1_0_fu_618_p2;
    S_V_1_1_15_fu_645_p3 <= 
        S_V_1_1_1_fu_76 when (trunc_ln54_reg_818_pp0_iter4_reg(0) = '1') else 
        S_V_1_0_fu_618_p2;
    S_V_1_1_16_fu_652_p3 <= 
        S_V_1_1_13_fu_624_p3 when (trunc_ln52_1_reg_769_pp0_iter4_reg(0) = '1') else 
        S_V_1_1_11_fu_88;
    S_V_1_1_17_fu_659_p3 <= 
        S_V_1_1_14_fu_631_p3 when (trunc_ln52_1_reg_769_pp0_iter4_reg(0) = '1') else 
        S_V_1_1_10_fu_84;
    S_V_1_1_18_fu_666_p3 <= 
        S_V_1_1_9_fu_80 when (trunc_ln52_1_reg_769_pp0_iter4_reg(0) = '1') else 
        S_V_1_1_fu_638_p3;
    S_V_1_1_19_fu_673_p3 <= 
        S_V_1_1_1_fu_76 when (trunc_ln52_1_reg_769_pp0_iter4_reg(0) = '1') else 
        S_V_1_1_15_fu_645_p3;
    S_V_1_1_1_out <= S_V_1_1_11_fu_88;

    S_V_1_1_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln52_reg_765_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln52_reg_765_pp0_iter3_reg = ap_const_lv1_1))) then 
            S_V_1_1_1_out_ap_vld <= ap_const_logic_1;
        else 
            S_V_1_1_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    S_V_1_1_fu_638_p3 <= 
        S_V_1_0_fu_618_p2 when (trunc_ln54_reg_818_pp0_iter4_reg(0) = '1') else 
        S_V_1_1_9_fu_80;
    add_ln1347_2_fu_540_p2 <= std_logic_vector(unsigned(shl_ln838_2_fu_532_p3) + unsigned(mul_ln1347_1_reg_918));
    add_ln1347_3_fu_574_p2 <= std_logic_vector(unsigned(shl_ln838_3_fu_567_p3) + unsigned(mul_ln1347_2_reg_928));
    add_ln1347_fu_517_p2 <= std_logic_vector(unsigned(shl_ln838_s_fu_510_p3) + unsigned(mul_ln1347_reg_908));
    add_ln52_1_fu_265_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten27_load) + unsigned(ap_const_lv3_1));
    add_ln52_fu_274_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_4) + unsigned(ap_const_lv2_1));
    add_ln53_fu_421_p2 <= std_logic_vector(unsigned(select_ln52_fu_290_p3) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln52_fu_259_p2)
    begin
        if (((icmp_ln52_fu_259_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_92)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_4 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_4 <= i_fu_92;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten27_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten27_fu_96)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten27_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_indvar_flatten27_load <= indvar_flatten27_fu_96;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_72, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_72;
        end if; 
    end process;

    grp_fu_793_p_ce <= ap_const_logic_1;
    grp_fu_793_p_din0 <= sext_ln818_fu_461_p1(32 - 1 downto 0);
    grp_fu_793_p_din1 <= zext_ln52_1_fu_452_p1(17 - 1 downto 0);
    grp_fu_797_p_ce <= ap_const_logic_1;
    grp_fu_797_p_din0 <= sext_ln1347_fu_470_p1(32 - 1 downto 0);
    grp_fu_797_p_din1 <= zext_ln52_2_fu_455_p1(17 - 1 downto 0);
    grp_fu_801_p_ce <= ap_const_logic_1;
    grp_fu_801_p_din0 <= sext_ln1347_1_fu_479_p1(32 - 1 downto 0);
    grp_fu_801_p_din1 <= zext_ln52_3_fu_458_p1(17 - 1 downto 0);
    grp_fu_805_p_ce <= ap_const_logic_1;
    grp_fu_805_p_din0 <= sext_ln1347_2_fu_501_p1(32 - 1 downto 0);
    grp_fu_805_p_din1 <= zext_ln52_4_fu_488_p1(17 - 1 downto 0);
    icmp_ln52_fu_259_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten27_load = ap_const_lv3_4) else "0";
    icmp_ln53_fu_284_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv2_2) else "0";
    j_2_cast_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln52_fu_290_p3),64));
    or_ln52_1_fu_358_p2 <= (select_ln52_7_fu_350_p3 or ap_const_lv3_2);
    or_ln52_2_fu_442_p2 <= (select_ln52_8_reg_793 or ap_const_lv3_3);
    or_ln52_fu_339_p2 <= (select_ln52_6_fu_331_p3 or ap_const_lv3_1);
    select_ln52_1_fu_306_p3 <= 
        add_ln52_fu_274_p2 when (icmp_ln53_fu_284_p2(0) = '1') else 
        ap_sig_allocacmp_i_4;
    select_ln52_2_fu_318_p3 <= 
        tmp_30_cast_fu_298_p3 when (icmp_ln53_fu_284_p2(0) = '1') else 
        tmp_26_cast_fu_251_p3;
    select_ln52_6_fu_331_p3 <= 
        tmp_30_cast_fu_298_p3 when (icmp_ln53_fu_284_p2(0) = '1') else 
        tmp_26_cast_fu_251_p3;
    select_ln52_7_fu_350_p3 <= 
        tmp_30_cast_fu_298_p3 when (icmp_ln53_fu_284_p2(0) = '1') else 
        tmp_26_cast_fu_251_p3;
    select_ln52_8_fu_369_p3 <= 
        tmp_30_cast_fu_298_p3 when (icmp_ln53_fu_284_p2(0) = '1') else 
        tmp_26_cast_fu_251_p3;
    select_ln52_fu_290_p3 <= 
        ap_const_lv2_0 when (icmp_ln53_fu_284_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln54_fu_603_p3 <= 
        select_ln813_1_fu_589_p3 when (trunc_ln52_1_reg_769_pp0_iter4_reg(0) = '1') else 
        select_ln813_fu_596_p3;
    select_ln813_1_fu_589_p3 <= 
        ap_const_lv12_999 when (trunc_ln54_reg_818_pp0_iter4_reg(0) = '1') else 
        ap_const_lv12_0;
    select_ln813_fu_596_p3 <= 
        ap_const_lv12_0 when (trunc_ln54_reg_818_pp0_iter4_reg(0) = '1') else 
        ap_const_lv12_999;
        sext_ln1273_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_34_cast_fu_382_p3),4));

        sext_ln1347_1_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(P_prior_V_load_2_reg_858),48));

        sext_ln1347_2_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(P_prior_V_load_3_reg_863_pp0_iter2_reg),48));

        sext_ln1347_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(P_prior_V_load_reg_853),48));

        sext_ln813_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln54_fu_603_p3),13));

        sext_ln818_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(P_prior_V_load_1_reg_848),48));

    shl_ln838_2_fu_532_p3 <= (tmp_2_fu_522_p4 & ap_const_lv16_0);
    shl_ln838_3_fu_567_p3 <= (tmp_3_reg_933 & ap_const_lv16_0);
    shl_ln838_s_fu_510_p3 <= (tmp_s_reg_913 & ap_const_lv16_0);
    tmp_26_cast_fu_251_p3 <= (trunc_ln1271_fu_247_p1 & ap_const_lv2_0);
    tmp_2_fu_522_p4 <= add_ln1347_fu_517_p2(47 downto 16);
    tmp_30_cast_fu_298_p3 <= (trunc_ln52_fu_280_p1 & ap_const_lv2_0);
    tmp_34_cast_fu_382_p3 <= (ap_const_lv1_1 & select_ln52_fu_290_p3);
    tmp_35_cast_fu_395_p3 <= (ap_const_lv2_2 & select_ln52_fu_290_p3);
    trunc_ln1271_fu_247_p1 <= ap_sig_allocacmp_i_4(1 - 1 downto 0);
    trunc_ln52_1_fu_314_p1 <= select_ln52_1_fu_306_p3(1 - 1 downto 0);
    trunc_ln52_fu_280_p1 <= add_ln52_fu_274_p2(1 - 1 downto 0);
    trunc_ln54_fu_417_p1 <= select_ln52_fu_290_p3(1 - 1 downto 0);
    trunc_ln818_1_fu_579_p4 <= add_ln1347_3_fu_574_p2(47 downto 16);
    zext_ln1271_2_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln52_1_fu_358_p2),64));
    zext_ln1271_3_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln52_2_fu_442_p2),64));
    zext_ln1271_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln52_fu_339_p2),64));
    zext_ln1273_2_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_cast_fu_395_p3),64));
    zext_ln1273_3_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1273_fu_408_p1),64));
    zext_ln1273_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_cast_fu_382_p3),64));
    zext_ln52_1_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(H_load_reg_828),48));
    zext_ln52_2_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(H_load_2_reg_833),48));
    zext_ln52_3_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(H_load_3_reg_838),48));
    zext_ln52_4_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(H_load_4_reg_883),48));
    zext_ln52_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln52_2_fu_318_p3),64));
    zext_ln813_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln813_fu_610_p1),32));
end behav;
