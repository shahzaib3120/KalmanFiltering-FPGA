-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kalman_filter_top_kalman_filter_top_Pipeline_VITIS_LOOP_151_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_hostmem_AWVALID : OUT STD_LOGIC;
    m_axi_hostmem_AWREADY : IN STD_LOGIC;
    m_axi_hostmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_hostmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hostmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_hostmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hostmem_WVALID : OUT STD_LOGIC;
    m_axi_hostmem_WREADY : IN STD_LOGIC;
    m_axi_hostmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_hostmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_WLAST : OUT STD_LOGIC;
    m_axi_hostmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hostmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hostmem_ARVALID : OUT STD_LOGIC;
    m_axi_hostmem_ARREADY : IN STD_LOGIC;
    m_axi_hostmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_hostmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hostmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_hostmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_hostmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_hostmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hostmem_RVALID : IN STD_LOGIC;
    m_axi_hostmem_RREADY : OUT STD_LOGIC;
    m_axi_hostmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_hostmem_RLAST : IN STD_LOGIC;
    m_axi_hostmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hostmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_hostmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hostmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_BVALID : IN STD_LOGIC;
    m_axi_hostmem_BREADY : OUT STD_LOGIC;
    m_axi_hostmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_hostmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_hostmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    x_init_V_0_load_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    x_init_V_1_load_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    x_init_V_2_load_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    x_init_V_3_load_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln151_1 : IN STD_LOGIC_VECTOR (61 downto 0);
    sext_ln151 : IN STD_LOGIC_VECTOR (61 downto 0);
    P_init_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    P_init_V_ce0 : OUT STD_LOGIC;
    P_init_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_init_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    P_init_V_ce1 : OUT STD_LOGIC;
    P_init_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kalman_filter_top_kalman_filter_top_Pipeline_VITIS_LOOP_151_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv63_2 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv63_3 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal icmp_ln151_reg_439 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state10_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage4 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal hostmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal hostmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal hostmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal sext_ln151_cast_fu_249_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln151_cast_reg_434 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln151_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_439_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_281_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_reg_443 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_309_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal hostmem_addr_reg_465 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal P_init_V_load_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln156_fu_367_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln156_reg_486 : STD_LOGIC_VECTOR (62 downto 0);
    signal P_init_V_load_4_reg_494 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal hostmem_addr_2_reg_505 : STD_LOGIC_VECTOR (63 downto 0);
    signal P_init_V_load_5_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal hostmem_addr_3_reg_516 : STD_LOGIC_VECTOR (63 downto 0);
    signal P_init_V_load_6_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal hostmem_addr_4_reg_527 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal zext_ln156_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_1_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_2_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln156_3_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln153_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln156_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln156_1_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln156_2_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln156_3_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_pp0_stage4_01001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal i_fu_88 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln151_fu_275_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_6 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_265_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln156_fu_294_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_9_cast10_fu_305_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln151_1_cast_fu_253_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln153_fu_323_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal or_ln156_1_fu_344_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln156_2_fu_354_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln153_fu_364_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln156_1_fu_382_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln156_2_fu_397_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln156_3_fu_412_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kalman_filter_top_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kalman_filter_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_32_1_1_U89 : component kalman_filter_top_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => x_init_V_0_load_2_reload,
        din1 => x_init_V_1_load_2_reload,
        din2 => x_init_V_2_load_2_reload,
        din3 => x_init_V_3_load_2_reload,
        din4 => empty_fu_265_p1,
        dout => tmp_9_fu_309_p6);

    flow_control_loop_pipe_sequential_init_U : component kalman_filter_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage4,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln151_fu_269_p2 = ap_const_lv1_0))) then 
                    i_fu_88 <= add_ln151_fu_275_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_88 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                P_init_V_load_4_reg_494 <= P_init_V_q0;
                P_init_V_load_reg_481 <= P_init_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                P_init_V_load_5_reg_511 <= P_init_V_q1;
                P_init_V_load_6_reg_522 <= P_init_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln156_reg_486 <= add_ln156_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                hostmem_addr_2_reg_505 <= sext_ln156_1_fu_387_p1;
                hostmem_addr_3_reg_516 <= sext_ln156_2_fu_402_p1;
                hostmem_addr_4_reg_527 <= sext_ln156_3_fu_417_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_fu_269_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                hostmem_addr_reg_465 <= sext_ln153_fu_329_p1;
                tmp_9_reg_460 <= tmp_9_fu_309_p6;
                    tmp_s_reg_443(3 downto 2) <= tmp_s_fu_281_p3(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln151_reg_439 <= icmp_ln151_fu_269_p2;
                icmp_ln151_reg_439_pp0_iter1_reg <= icmp_ln151_reg_439;
                sext_ln151_cast_reg_434 <= sext_ln151_cast_fu_249_p1;
            end if;
        end if;
    end process;
    tmp_s_reg_443(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter1_stage1, ap_idle_pp0_0to0, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    P_init_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, zext_ln156_1_fu_300_p1, zext_ln156_3_fu_359_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                P_init_V_address0 <= zext_ln156_3_fu_359_p1(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                P_init_V_address0 <= zext_ln156_1_fu_300_p1(4 - 1 downto 0);
            else 
                P_init_V_address0 <= "XXXX";
            end if;
        else 
            P_init_V_address0 <= "XXXX";
        end if; 
    end process;


    P_init_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, zext_ln156_fu_289_p1, zext_ln156_2_fu_349_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                P_init_V_address1 <= zext_ln156_2_fu_349_p1(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                P_init_V_address1 <= zext_ln156_fu_289_p1(4 - 1 downto 0);
            else 
                P_init_V_address1 <= "XXXX";
            end if;
        else 
            P_init_V_address1 <= "XXXX";
        end if; 
    end process;


    P_init_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            P_init_V_ce0 <= ap_const_logic_1;
        else 
            P_init_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    P_init_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            P_init_V_ce1 <= ap_const_logic_1;
        else 
            P_init_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln151_fu_275_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_6) + unsigned(ap_const_lv3_1));
    add_ln153_fu_323_p2 <= std_logic_vector(unsigned(i_9_cast10_fu_305_p1) + unsigned(sext_ln151_1_cast_fu_253_p1));
    add_ln156_1_fu_382_p2 <= std_logic_vector(signed(add_ln156_reg_486) + signed(ap_const_lv63_1));
    add_ln156_2_fu_397_p2 <= std_logic_vector(signed(add_ln156_reg_486) + signed(ap_const_lv63_2));
    add_ln156_3_fu_412_p2 <= std_logic_vector(signed(add_ln156_reg_486) + signed(ap_const_lv63_3));
    add_ln156_fu_367_p2 <= std_logic_vector(unsigned(zext_ln153_fu_364_p1) + unsigned(sext_ln151_cast_reg_434));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_hostmem_BVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((m_axi_hostmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, m_axi_hostmem_BVALID, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io)) or ((m_axi_hostmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, m_axi_hostmem_BVALID, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io)) or ((m_axi_hostmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_hostmem_BVALID)
    begin
                ap_block_pp0_stage1_01001 <= ((m_axi_hostmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, m_axi_hostmem_WREADY, m_axi_hostmem_BVALID, ap_block_state2_io)
    begin
                ap_block_pp0_stage1_11001 <= (((m_axi_hostmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((m_axi_hostmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, m_axi_hostmem_WREADY, m_axi_hostmem_BVALID, ap_block_state2_io)
    begin
                ap_block_pp0_stage1_subdone <= (((m_axi_hostmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((m_axi_hostmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_01001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_hostmem_BVALID)
    begin
                ap_block_pp0_stage2_01001 <= ((m_axi_hostmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, m_axi_hostmem_BVALID, ap_block_state3_io)
    begin
                ap_block_pp0_stage2_11001 <= (((m_axi_hostmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, m_axi_hostmem_BVALID, ap_block_state3_io)
    begin
                ap_block_pp0_stage2_subdone <= (((m_axi_hostmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_01001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_hostmem_BVALID)
    begin
                ap_block_pp0_stage3_01001 <= ((m_axi_hostmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, m_axi_hostmem_BVALID, ap_block_state4_io)
    begin
                ap_block_pp0_stage3_11001 <= (((m_axi_hostmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, m_axi_hostmem_BVALID, ap_block_state4_io)
    begin
                ap_block_pp0_stage3_subdone <= (((m_axi_hostmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_01001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_hostmem_BVALID)
    begin
                ap_block_pp0_stage4_01001 <= ((m_axi_hostmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, m_axi_hostmem_BVALID, ap_block_state5_io)
    begin
                ap_block_pp0_stage4_11001 <= (((m_axi_hostmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, m_axi_hostmem_BVALID, ap_block_state5_io)
    begin
                ap_block_pp0_stage4_subdone <= (((m_axi_hostmem_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;


    ap_block_state10_pp0_stage4_iter1_assign_proc : process(m_axi_hostmem_BVALID)
    begin
                ap_block_state10_pp0_stage4_iter1 <= (m_axi_hostmem_BVALID = ap_const_logic_0);
    end process;


    ap_block_state11_pp0_stage0_iter2_assign_proc : process(m_axi_hostmem_BVALID)
    begin
                ap_block_state11_pp0_stage0_iter2 <= (m_axi_hostmem_BVALID = ap_const_logic_0);
    end process;


    ap_block_state12_pp0_stage1_iter2_assign_proc : process(m_axi_hostmem_BVALID)
    begin
                ap_block_state12_pp0_stage1_iter2 <= (m_axi_hostmem_BVALID = ap_const_logic_0);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(m_axi_hostmem_AWREADY, icmp_ln151_reg_439)
    begin
                ap_block_state2_io <= ((icmp_ln151_reg_439 = ap_const_lv1_0) and (m_axi_hostmem_AWREADY = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_hostmem_AWREADY, m_axi_hostmem_WREADY, icmp_ln151_reg_439)
    begin
                ap_block_state3_io <= (((icmp_ln151_reg_439 = ap_const_lv1_0) and (m_axi_hostmem_AWREADY = ap_const_logic_0)) or ((icmp_ln151_reg_439 = ap_const_lv1_0) and (m_axi_hostmem_WREADY = ap_const_logic_0)));
    end process;

        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_hostmem_AWREADY, m_axi_hostmem_WREADY, icmp_ln151_reg_439)
    begin
                ap_block_state4_io <= (((icmp_ln151_reg_439 = ap_const_lv1_0) and (m_axi_hostmem_AWREADY = ap_const_logic_0)) or ((icmp_ln151_reg_439 = ap_const_lv1_0) and (m_axi_hostmem_WREADY = ap_const_logic_0)));
    end process;

        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(m_axi_hostmem_AWREADY, m_axi_hostmem_WREADY, icmp_ln151_reg_439)
    begin
                ap_block_state5_io <= (((icmp_ln151_reg_439 = ap_const_lv1_0) and (m_axi_hostmem_AWREADY = ap_const_logic_0)) or ((icmp_ln151_reg_439 = ap_const_lv1_0) and (m_axi_hostmem_WREADY = ap_const_logic_0)));
    end process;

        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(m_axi_hostmem_AWREADY, m_axi_hostmem_WREADY)
    begin
                ap_block_state6_io <= ((m_axi_hostmem_WREADY = ap_const_logic_0) or (m_axi_hostmem_AWREADY = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage2_iter1_assign_proc : process(m_axi_hostmem_BVALID)
    begin
                ap_block_state8_pp0_stage2_iter1 <= (m_axi_hostmem_BVALID = ap_const_logic_0);
    end process;


    ap_block_state9_pp0_stage3_iter1_assign_proc : process(m_axi_hostmem_BVALID)
    begin
                ap_block_state9_pp0_stage3_iter1 <= (m_axi_hostmem_BVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, icmp_ln151_reg_439, ap_block_pp0_stage4_subdone)
    begin
        if (((icmp_ln151_reg_439 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln151_reg_439_pp0_iter1_reg, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln151_reg_439_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage4;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_88, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_6 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_6 <= i_fu_88;
        end if; 
    end process;

    empty_fu_265_p1 <= ap_sig_allocacmp_i_6(2 - 1 downto 0);

    hostmem_blk_n_AW_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, m_axi_hostmem_AWREADY, icmp_ln151_reg_439, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage0)
    begin
        if ((((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4)) or ((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2)) or ((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            hostmem_blk_n_AW <= m_axi_hostmem_AWREADY;
        else 
            hostmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    hostmem_blk_n_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, m_axi_hostmem_BVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2)))) then 
            hostmem_blk_n_B <= m_axi_hostmem_BVALID;
        else 
            hostmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    hostmem_blk_n_W_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, m_axi_hostmem_WREADY, icmp_ln151_reg_439, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage0)
    begin
        if ((((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4)) or ((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)))) then 
            hostmem_blk_n_W <= m_axi_hostmem_WREADY;
        else 
            hostmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    i_9_cast10_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_6),63));
    icmp_ln151_fu_269_p2 <= "1" when (ap_sig_allocacmp_i_6 = ap_const_lv3_4) else "0";
    m_axi_hostmem_ARADDR <= ap_const_lv64_0;
    m_axi_hostmem_ARBURST <= ap_const_lv2_0;
    m_axi_hostmem_ARCACHE <= ap_const_lv4_0;
    m_axi_hostmem_ARID <= ap_const_lv1_0;
    m_axi_hostmem_ARLEN <= ap_const_lv32_0;
    m_axi_hostmem_ARLOCK <= ap_const_lv2_0;
    m_axi_hostmem_ARPROT <= ap_const_lv3_0;
    m_axi_hostmem_ARQOS <= ap_const_lv4_0;
    m_axi_hostmem_ARREGION <= ap_const_lv4_0;
    m_axi_hostmem_ARSIZE <= ap_const_lv3_0;
    m_axi_hostmem_ARUSER <= ap_const_lv1_0;
    m_axi_hostmem_ARVALID <= ap_const_logic_0;

    m_axi_hostmem_AWADDR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, icmp_ln151_reg_439, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, hostmem_addr_reg_465, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, hostmem_addr_2_reg_505, hostmem_addr_3_reg_516, hostmem_addr_4_reg_527, sext_ln156_fu_372_p1, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_hostmem_AWADDR <= hostmem_addr_4_reg_527;
        elsif (((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            m_axi_hostmem_AWADDR <= hostmem_addr_3_reg_516;
        elsif (((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            m_axi_hostmem_AWADDR <= hostmem_addr_2_reg_505;
        elsif (((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            m_axi_hostmem_AWADDR <= sext_ln156_fu_372_p1;
        elsif (((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_hostmem_AWADDR <= hostmem_addr_reg_465;
        else 
            m_axi_hostmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_hostmem_AWBURST <= ap_const_lv2_0;
    m_axi_hostmem_AWCACHE <= ap_const_lv4_0;
    m_axi_hostmem_AWID <= ap_const_lv1_0;
    m_axi_hostmem_AWLEN <= ap_const_lv32_1;
    m_axi_hostmem_AWLOCK <= ap_const_lv2_0;
    m_axi_hostmem_AWPROT <= ap_const_lv3_0;
    m_axi_hostmem_AWQOS <= ap_const_lv4_0;
    m_axi_hostmem_AWREGION <= ap_const_lv4_0;
    m_axi_hostmem_AWSIZE <= ap_const_lv3_0;
    m_axi_hostmem_AWUSER <= ap_const_lv1_0;

    m_axi_hostmem_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, icmp_ln151_reg_439, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axi_hostmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_hostmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_hostmem_BREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            m_axi_hostmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_hostmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_hostmem_RREADY <= ap_const_logic_0;

    m_axi_hostmem_WDATA_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, icmp_ln151_reg_439, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, tmp_9_reg_460, P_init_V_load_reg_481, P_init_V_load_4_reg_494, P_init_V_load_5_reg_511, P_init_V_load_6_reg_522, ap_block_pp0_stage2_01001, ap_block_pp0_stage3_01001, ap_block_pp0_stage4_01001, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001))) then 
            m_axi_hostmem_WDATA <= P_init_V_load_6_reg_522;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            m_axi_hostmem_WDATA <= P_init_V_load_5_reg_511;
        elsif (((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_01001))) then 
            m_axi_hostmem_WDATA <= P_init_V_load_4_reg_494;
        elsif (((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_01001))) then 
            m_axi_hostmem_WDATA <= P_init_V_load_reg_481;
        elsif (((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_01001))) then 
            m_axi_hostmem_WDATA <= tmp_9_reg_460;
        else 
            m_axi_hostmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_hostmem_WID <= ap_const_lv1_0;
    m_axi_hostmem_WLAST <= ap_const_logic_0;
    m_axi_hostmem_WSTRB <= ap_const_lv4_F;
    m_axi_hostmem_WUSER <= ap_const_lv1_0;

    m_axi_hostmem_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, icmp_ln151_reg_439, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln151_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            m_axi_hostmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_hostmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln156_1_fu_344_p2 <= (tmp_s_reg_443 or ap_const_lv4_2);
    or_ln156_2_fu_354_p2 <= (tmp_s_reg_443 or ap_const_lv4_3);
    or_ln156_fu_294_p2 <= (tmp_s_fu_281_p3 or ap_const_lv4_1);
        sext_ln151_1_cast_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln151_1),63));

        sext_ln151_cast_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln151),63));

        sext_ln153_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln153_fu_323_p2),64));

        sext_ln156_1_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln156_1_fu_382_p2),64));

        sext_ln156_2_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln156_2_fu_397_p2),64));

        sext_ln156_3_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln156_3_fu_412_p2),64));

        sext_ln156_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln156_reg_486),64));

    tmp_s_fu_281_p3 <= (empty_fu_265_p1 & ap_const_lv2_0);
    zext_ln153_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_443),63));
    zext_ln156_1_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln156_fu_294_p2),64));
    zext_ln156_2_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln156_1_fu_344_p2),64));
    zext_ln156_3_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln156_2_fu_354_p2),64));
    zext_ln156_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_281_p3),64));
end behav;
