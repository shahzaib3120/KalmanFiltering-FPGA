-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kalman_filter_top_kalman_filter_top_Pipeline_VITIS_LOOP_82_17 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_init_V_3_load : IN STD_LOGIC_VECTOR (31 downto 0);
    x_init_V_2_load : IN STD_LOGIC_VECTOR (31 downto 0);
    x_init_V_1_load : IN STD_LOGIC_VECTOR (31 downto 0);
    x_init_V_0_load : IN STD_LOGIC_VECTOR (31 downto 0);
    K_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    K_V_ce0 : OUT STD_LOGIC;
    K_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    K_V_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    K_V_ce1 : OUT STD_LOGIC;
    K_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln1273_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_V_1_0257_cast : IN STD_LOGIC_VECTOR (31 downto 0);
    x_init_V_3_load_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_init_V_3_load_2_out_ap_vld : OUT STD_LOGIC;
    x_init_V_2_load_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_init_V_2_load_2_out_ap_vld : OUT STD_LOGIC;
    x_init_V_1_load_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_init_V_1_load_2_out_ap_vld : OUT STD_LOGIC;
    x_init_V_0_load_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_init_V_0_load_2_out_ap_vld : OUT STD_LOGIC;
    x_init_V_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
    x_init_V_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_init_V_0_o_ap_vld : OUT STD_LOGIC;
    x_init_V_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    x_init_V_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_init_V_1_o_ap_vld : OUT STD_LOGIC;
    x_init_V_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    x_init_V_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_init_V_2_o_ap_vld : OUT STD_LOGIC;
    x_init_V_3_i : IN STD_LOGIC_VECTOR (31 downto 0);
    x_init_V_3_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_init_V_3_o_ap_vld : OUT STD_LOGIC;
    grp_fu_363_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_363_p_din1 : OUT STD_LOGIC_VECTOR (32 downto 0);
    grp_fu_363_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
    grp_fu_363_p_ce : OUT STD_LOGIC;
    grp_fu_377_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_377_p_din1 : OUT STD_LOGIC_VECTOR (32 downto 0);
    grp_fu_377_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
    grp_fu_377_p_ce : OUT STD_LOGIC );
end;


architecture behav of kalman_filter_top_kalman_filter_top_Pipeline_VITIS_LOOP_82_17 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln82_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal y_V_1_0257_cast_cast_fu_239_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal y_V_1_0257_cast_cast_reg_506 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_9_cast_fu_243_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_9_cast_reg_511 : STD_LOGIC_VECTOR (47 downto 0);
    signal empty_fu_275_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_516 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_516_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_516_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_516_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_516_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln82_reg_521 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_521_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_521_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_521_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_521_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln1271_fu_291_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln1271_reg_525 : STD_LOGIC_VECTOR (2 downto 0);
    signal K_V_load_reg_540 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1273_fu_317_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal K_V_load_1_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1273_reg_555 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_1_fu_325_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal x_init_V_0_load_1_reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_init_V_1_load_1_reg_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_init_V_2_load_1_reg_579 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_init_V_3_load_1_reg_586 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1273_1_reg_593 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_s_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_x_init_V_3_load_262_phi_fu_190_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_x_init_V_3_load_262_reg_187 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_x_init_V_2_load_260_phi_fu_203_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_x_init_V_2_load_260_reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_x_init_V_1_load_258_phi_fu_216_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_x_init_V_1_load_258_reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_x_init_V_0_load_256_phi_fu_229_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_x_init_V_0_load_256_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1271_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1271_1_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_allocacmp_x_init_V_0_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_x_init_V_1_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_x_init_V_2_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_x_init_V_3_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_78 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln82_fu_285_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_init_V_0_load_2_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_init_V_1_load_2_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_init_V_2_load_2_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_init_V_3_load_2_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal or_ln1271_fu_307_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_349_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln838_s_fu_362_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln1347_fu_370_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal shl_ln838_1_fu_385_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln1347_1_fu_392_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kalman_filter_top_mul_32s_32s_48_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component kalman_filter_top_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kalman_filter_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_32_1_1_U64 : component kalman_filter_top_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_sig_allocacmp_x_init_V_0_load_1,
        din1 => ap_sig_allocacmp_x_init_V_1_load_1,
        din2 => ap_sig_allocacmp_x_init_V_2_load_1,
        din3 => ap_sig_allocacmp_x_init_V_3_load_1,
        din4 => empty_reg_516_pp0_iter3_reg,
        dout => tmp_8_fu_349_p6);

    flow_control_loop_pipe_sequential_init_U : component kalman_filter_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    i_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln82_fu_279_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_78 <= add_ln82_fu_285_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_78 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    x_init_V_0_load_2_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_init_V_0_load_2_fu_82 <= x_init_V_0_load;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    x_init_V_0_load_2_fu_82 <= ap_phi_mux_x_init_V_0_load_256_phi_fu_229_p8;
                end if;
            end if; 
        end if;
    end process;

    x_init_V_1_load_2_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_init_V_1_load_2_fu_86 <= x_init_V_1_load;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    x_init_V_1_load_2_fu_86 <= ap_phi_mux_x_init_V_1_load_258_phi_fu_216_p8;
                end if;
            end if; 
        end if;
    end process;

    x_init_V_2_load_2_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_init_V_2_load_2_fu_90 <= x_init_V_2_load;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    x_init_V_2_load_2_fu_90 <= ap_phi_mux_x_init_V_2_load_260_phi_fu_203_p8;
                end if;
            end if; 
        end if;
    end process;

    x_init_V_3_load_2_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_init_V_3_load_2_fu_94 <= x_init_V_3_load;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    x_init_V_3_load_2_fu_94 <= ap_phi_mux_x_init_V_3_load_262_phi_fu_190_p8;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln82_reg_521_pp0_iter1_reg = ap_const_lv1_0))) then
                K_V_load_1_reg_550 <= K_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln82_reg_521 = ap_const_lv1_0))) then
                K_V_load_reg_540 <= K_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_reg_516 <= empty_fu_275_p1;
                empty_reg_516_pp0_iter1_reg <= empty_reg_516;
                icmp_ln82_reg_521 <= icmp_ln82_fu_279_p2;
                icmp_ln82_reg_521_pp0_iter1_reg <= icmp_ln82_reg_521;
                sext_ln1273_9_cast_reg_511 <= sext_ln1273_9_cast_fu_243_p1;
                y_V_1_0257_cast_cast_reg_506 <= y_V_1_0257_cast_cast_fu_239_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                empty_reg_516_pp0_iter2_reg <= empty_reg_516_pp0_iter1_reg;
                empty_reg_516_pp0_iter3_reg <= empty_reg_516_pp0_iter2_reg;
                empty_reg_516_pp0_iter4_reg <= empty_reg_516_pp0_iter3_reg;
                icmp_ln82_reg_521_pp0_iter2_reg <= icmp_ln82_reg_521_pp0_iter1_reg;
                icmp_ln82_reg_521_pp0_iter3_reg <= icmp_ln82_reg_521_pp0_iter2_reg;
                icmp_ln82_reg_521_pp0_iter4_reg <= icmp_ln82_reg_521_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln82_reg_521_pp0_iter3_reg = ap_const_lv1_0))) then
                mul_ln1273_1_reg_593 <= grp_fu_377_p_dout0;
                tmp_s_reg_598 <= add_ln1347_fu_370_p2(47 downto 16);
                x_init_V_0_load_1_reg_565 <= ap_sig_allocacmp_x_init_V_0_load_1;
                x_init_V_1_load_1_reg_572 <= ap_sig_allocacmp_x_init_V_1_load_1;
                x_init_V_2_load_1_reg_579 <= ap_sig_allocacmp_x_init_V_2_load_1;
                x_init_V_3_load_1_reg_586 <= ap_sig_allocacmp_x_init_V_3_load_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln82_reg_521_pp0_iter2_reg = ap_const_lv1_0))) then
                mul_ln1273_reg_555 <= grp_fu_363_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln82_fu_279_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    shl_ln1271_reg_525(2 downto 1) <= shl_ln1271_fu_291_p2(2 downto 1);
            end if;
        end if;
    end process;
    shl_ln1271_reg_525(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    K_V_address0 <= zext_ln1271_1_fu_312_p1(3 - 1 downto 0);
    K_V_address1 <= zext_ln1271_fu_297_p1(3 - 1 downto 0);

    K_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            K_V_ce0 <= ap_const_logic_1;
        else 
            K_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    K_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            K_V_ce1 <= ap_const_logic_1;
        else 
            K_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1347_1_fu_392_p2 <= std_logic_vector(unsigned(shl_ln838_1_fu_385_p3) + unsigned(mul_ln1273_1_reg_593));
    add_ln1347_fu_370_p2 <= std_logic_vector(unsigned(shl_ln838_s_fu_362_p3) + unsigned(mul_ln1273_reg_555));
    add_ln82_fu_285_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln82_fu_279_p2)
    begin
        if (((icmp_ln82_fu_279_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_x_init_V_0_load_256_phi_fu_229_p8_assign_proc : process(empty_reg_516_pp0_iter4_reg, icmp_ln82_reg_521_pp0_iter4_reg, x_init_V_0_load_1_reg_565, ap_phi_reg_pp0_iter5_x_init_V_0_load_256_reg_226, add_ln1347_1_fu_392_p2)
    begin
        if (((icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_0))) then 
            ap_phi_mux_x_init_V_0_load_256_phi_fu_229_p8 <= add_ln1347_1_fu_392_p2(47 downto 16);
        elsif ((((icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_1)) or ((icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_2)) or ((icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_3)))) then 
            ap_phi_mux_x_init_V_0_load_256_phi_fu_229_p8 <= x_init_V_0_load_1_reg_565;
        else 
            ap_phi_mux_x_init_V_0_load_256_phi_fu_229_p8 <= ap_phi_reg_pp0_iter5_x_init_V_0_load_256_reg_226;
        end if; 
    end process;


    ap_phi_mux_x_init_V_1_load_258_phi_fu_216_p8_assign_proc : process(empty_reg_516_pp0_iter4_reg, icmp_ln82_reg_521_pp0_iter4_reg, x_init_V_1_load_1_reg_572, ap_phi_reg_pp0_iter5_x_init_V_1_load_258_reg_213, add_ln1347_1_fu_392_p2)
    begin
        if (((icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_1))) then 
            ap_phi_mux_x_init_V_1_load_258_phi_fu_216_p8 <= add_ln1347_1_fu_392_p2(47 downto 16);
        elsif ((((icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_0)) or ((icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_2)) or ((icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_3)))) then 
            ap_phi_mux_x_init_V_1_load_258_phi_fu_216_p8 <= x_init_V_1_load_1_reg_572;
        else 
            ap_phi_mux_x_init_V_1_load_258_phi_fu_216_p8 <= ap_phi_reg_pp0_iter5_x_init_V_1_load_258_reg_213;
        end if; 
    end process;


    ap_phi_mux_x_init_V_2_load_260_phi_fu_203_p8_assign_proc : process(empty_reg_516_pp0_iter4_reg, icmp_ln82_reg_521_pp0_iter4_reg, x_init_V_2_load_1_reg_579, ap_phi_reg_pp0_iter5_x_init_V_2_load_260_reg_200, add_ln1347_1_fu_392_p2)
    begin
        if (((icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_2))) then 
            ap_phi_mux_x_init_V_2_load_260_phi_fu_203_p8 <= add_ln1347_1_fu_392_p2(47 downto 16);
        elsif ((((icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_0)) or ((icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_1)) or ((icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_3)))) then 
            ap_phi_mux_x_init_V_2_load_260_phi_fu_203_p8 <= x_init_V_2_load_1_reg_579;
        else 
            ap_phi_mux_x_init_V_2_load_260_phi_fu_203_p8 <= ap_phi_reg_pp0_iter5_x_init_V_2_load_260_reg_200;
        end if; 
    end process;


    ap_phi_mux_x_init_V_3_load_262_phi_fu_190_p8_assign_proc : process(empty_reg_516_pp0_iter4_reg, icmp_ln82_reg_521_pp0_iter4_reg, x_init_V_3_load_1_reg_586, ap_phi_reg_pp0_iter5_x_init_V_3_load_262_reg_187, add_ln1347_1_fu_392_p2)
    begin
        if ((((icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_0)) or ((icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_1)) or ((icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_2)))) then 
            ap_phi_mux_x_init_V_3_load_262_phi_fu_190_p8 <= x_init_V_3_load_1_reg_586;
        elsif (((icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_3))) then 
            ap_phi_mux_x_init_V_3_load_262_phi_fu_190_p8 <= add_ln1347_1_fu_392_p2(47 downto 16);
        else 
            ap_phi_mux_x_init_V_3_load_262_phi_fu_190_p8 <= ap_phi_reg_pp0_iter5_x_init_V_3_load_262_reg_187;
        end if; 
    end process;

    ap_phi_reg_pp0_iter5_x_init_V_0_load_256_reg_226 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter5_x_init_V_1_load_258_reg_213 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter5_x_init_V_2_load_260_reg_200 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter5_x_init_V_3_load_262_reg_187 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_78, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_78;
        end if; 
    end process;


    ap_sig_allocacmp_x_init_V_0_load_1_assign_proc : process(ap_enable_reg_pp0_iter5, x_init_V_0_i, empty_reg_516_pp0_iter4_reg, icmp_ln82_reg_521_pp0_iter4_reg, ap_block_pp0_stage0, add_ln1347_1_fu_392_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_0))) then 
            ap_sig_allocacmp_x_init_V_0_load_1 <= add_ln1347_1_fu_392_p2(47 downto 16);
        else 
            ap_sig_allocacmp_x_init_V_0_load_1 <= x_init_V_0_i;
        end if; 
    end process;


    ap_sig_allocacmp_x_init_V_1_load_1_assign_proc : process(ap_enable_reg_pp0_iter5, x_init_V_1_i, empty_reg_516_pp0_iter4_reg, icmp_ln82_reg_521_pp0_iter4_reg, ap_block_pp0_stage0, add_ln1347_1_fu_392_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_1))) then 
            ap_sig_allocacmp_x_init_V_1_load_1 <= add_ln1347_1_fu_392_p2(47 downto 16);
        else 
            ap_sig_allocacmp_x_init_V_1_load_1 <= x_init_V_1_i;
        end if; 
    end process;


    ap_sig_allocacmp_x_init_V_2_load_1_assign_proc : process(ap_enable_reg_pp0_iter5, x_init_V_2_i, empty_reg_516_pp0_iter4_reg, icmp_ln82_reg_521_pp0_iter4_reg, ap_block_pp0_stage0, add_ln1347_1_fu_392_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_2))) then 
            ap_sig_allocacmp_x_init_V_2_load_1 <= add_ln1347_1_fu_392_p2(47 downto 16);
        else 
            ap_sig_allocacmp_x_init_V_2_load_1 <= x_init_V_2_i;
        end if; 
    end process;


    ap_sig_allocacmp_x_init_V_3_load_1_assign_proc : process(ap_enable_reg_pp0_iter5, x_init_V_3_i, empty_reg_516_pp0_iter4_reg, icmp_ln82_reg_521_pp0_iter4_reg, ap_block_pp0_stage0, add_ln1347_1_fu_392_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_3))) then 
            ap_sig_allocacmp_x_init_V_3_load_1 <= add_ln1347_1_fu_392_p2(47 downto 16);
        else 
            ap_sig_allocacmp_x_init_V_3_load_1 <= x_init_V_3_i;
        end if; 
    end process;

    empty_fu_275_p1 <= ap_sig_allocacmp_i_2(2 - 1 downto 0);
    grp_fu_363_p_ce <= ap_const_logic_1;
    grp_fu_363_p_din0 <= sext_ln1273_9_cast_reg_511(32 - 1 downto 0);
    grp_fu_363_p_din1 <= sext_ln1273_fu_317_p1(33 - 1 downto 0);
    grp_fu_377_p_ce <= ap_const_logic_1;
    grp_fu_377_p_din0 <= y_V_1_0257_cast_cast_reg_506(32 - 1 downto 0);
    grp_fu_377_p_din1 <= sext_ln1273_1_fu_325_p1(33 - 1 downto 0);
    icmp_ln82_fu_279_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv3_4) else "0";
    or_ln1271_fu_307_p2 <= (shl_ln1271_reg_525 or ap_const_lv3_1);
        sext_ln1273_1_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(K_V_load_1_reg_550),48));

        sext_ln1273_9_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1273_9),48));

        sext_ln1273_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(K_V_load_reg_540),48));

    shl_ln1271_fu_291_p2 <= std_logic_vector(shift_left(unsigned(ap_sig_allocacmp_i_2),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    shl_ln838_1_fu_385_p3 <= (tmp_s_reg_598 & ap_const_lv16_0);
    shl_ln838_s_fu_362_p3 <= (tmp_8_fu_349_p6 & ap_const_lv16_0);
    x_init_V_0_load_2_out <= x_init_V_0_load_2_fu_82;

    x_init_V_0_load_2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln82_reg_521_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln82_reg_521_pp0_iter3_reg = ap_const_lv1_1))) then 
            x_init_V_0_load_2_out_ap_vld <= ap_const_logic_1;
        else 
            x_init_V_0_load_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    x_init_V_0_o_assign_proc : process(ap_enable_reg_pp0_iter5, x_init_V_0_i, empty_reg_516_pp0_iter4_reg, icmp_ln82_reg_521_pp0_iter4_reg, ap_block_pp0_stage0, add_ln1347_1_fu_392_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_0))) then 
            x_init_V_0_o <= add_ln1347_1_fu_392_p2(47 downto 16);
        else 
            x_init_V_0_o <= x_init_V_0_i;
        end if; 
    end process;


    x_init_V_0_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, empty_reg_516_pp0_iter4_reg, icmp_ln82_reg_521_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_0))) then 
            x_init_V_0_o_ap_vld <= ap_const_logic_1;
        else 
            x_init_V_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    x_init_V_1_load_2_out <= x_init_V_1_load_2_fu_86;

    x_init_V_1_load_2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln82_reg_521_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln82_reg_521_pp0_iter3_reg = ap_const_lv1_1))) then 
            x_init_V_1_load_2_out_ap_vld <= ap_const_logic_1;
        else 
            x_init_V_1_load_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    x_init_V_1_o_assign_proc : process(ap_enable_reg_pp0_iter5, x_init_V_1_i, empty_reg_516_pp0_iter4_reg, icmp_ln82_reg_521_pp0_iter4_reg, ap_block_pp0_stage0, add_ln1347_1_fu_392_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_1))) then 
            x_init_V_1_o <= add_ln1347_1_fu_392_p2(47 downto 16);
        else 
            x_init_V_1_o <= x_init_V_1_i;
        end if; 
    end process;


    x_init_V_1_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, empty_reg_516_pp0_iter4_reg, icmp_ln82_reg_521_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_1))) then 
            x_init_V_1_o_ap_vld <= ap_const_logic_1;
        else 
            x_init_V_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    x_init_V_2_load_2_out <= x_init_V_2_load_2_fu_90;

    x_init_V_2_load_2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln82_reg_521_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln82_reg_521_pp0_iter3_reg = ap_const_lv1_1))) then 
            x_init_V_2_load_2_out_ap_vld <= ap_const_logic_1;
        else 
            x_init_V_2_load_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    x_init_V_2_o_assign_proc : process(ap_enable_reg_pp0_iter5, x_init_V_2_i, empty_reg_516_pp0_iter4_reg, icmp_ln82_reg_521_pp0_iter4_reg, ap_block_pp0_stage0, add_ln1347_1_fu_392_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_2))) then 
            x_init_V_2_o <= add_ln1347_1_fu_392_p2(47 downto 16);
        else 
            x_init_V_2_o <= x_init_V_2_i;
        end if; 
    end process;


    x_init_V_2_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, empty_reg_516_pp0_iter4_reg, icmp_ln82_reg_521_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_2))) then 
            x_init_V_2_o_ap_vld <= ap_const_logic_1;
        else 
            x_init_V_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    x_init_V_3_load_2_out <= x_init_V_3_load_2_fu_94;

    x_init_V_3_load_2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln82_reg_521_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln82_reg_521_pp0_iter3_reg = ap_const_lv1_1))) then 
            x_init_V_3_load_2_out_ap_vld <= ap_const_logic_1;
        else 
            x_init_V_3_load_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    x_init_V_3_o_assign_proc : process(ap_enable_reg_pp0_iter5, x_init_V_3_i, empty_reg_516_pp0_iter4_reg, icmp_ln82_reg_521_pp0_iter4_reg, ap_block_pp0_stage0, add_ln1347_1_fu_392_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_3))) then 
            x_init_V_3_o <= add_ln1347_1_fu_392_p2(47 downto 16);
        else 
            x_init_V_3_o <= x_init_V_3_i;
        end if; 
    end process;


    x_init_V_3_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, empty_reg_516_pp0_iter4_reg, icmp_ln82_reg_521_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln82_reg_521_pp0_iter4_reg = ap_const_lv1_0) and (empty_reg_516_pp0_iter4_reg = ap_const_lv2_3))) then 
            x_init_V_3_o_ap_vld <= ap_const_logic_1;
        else 
            x_init_V_3_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        y_V_1_0257_cast_cast_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_V_1_0257_cast),48));

    zext_ln1271_1_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1271_fu_307_p2),64));
    zext_ln1271_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1271_fu_291_p2),64));
end behav;
