// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kalman_filter_top_kalman_filter_top_Pipeline_VITIS_LOOP_27_3_VITIS_LOOP_28_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        P_prior_V_address0,
        P_prior_V_ce0,
        P_prior_V_we0,
        P_prior_V_d0,
        P_init_V_address0,
        P_init_V_ce0,
        P_init_V_q0,
        P_init_V_address1,
        P_init_V_ce1,
        P_init_V_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] P_prior_V_address0;
output   P_prior_V_ce0;
output   P_prior_V_we0;
output  [31:0] P_prior_V_d0;
output  [3:0] P_init_V_address0;
output   P_init_V_ce0;
input  [31:0] P_init_V_q0;
output  [3:0] P_init_V_address1;
output   P_init_V_ce1;
input  [31:0] P_init_V_q1;

reg ap_idle;
reg P_prior_V_ce0;
reg P_prior_V_we0;
reg[3:0] P_init_V_address0;
reg P_init_V_ce0;
reg[3:0] P_init_V_address1;
reg P_init_V_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln27_reg_489;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg  signed [31:0] reg_128;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg  signed [31:0] reg_132;
wire   [0:0] icmp_ln27_fu_154_p2;
reg   [0:0] icmp_ln27_reg_489_pp0_iter1_reg;
wire   [0:0] icmp_ln28_fu_169_p2;
reg   [0:0] icmp_ln28_reg_493;
wire   [2:0] select_ln27_fu_175_p3;
reg   [2:0] select_ln27_reg_498;
wire   [3:0] zext_ln1273_fu_188_p1;
reg   [3:0] zext_ln1273_reg_505;
wire   [1:0] trunc_ln29_fu_224_p1;
reg   [1:0] trunc_ln29_reg_520;
wire   [31:0] tmp_4_fu_254_p6;
reg   [31:0] tmp_4_reg_537;
wire   [31:0] tmp_5_fu_268_p6;
reg   [31:0] tmp_5_reg_542;
wire   [3:0] add_ln29_fu_304_p2;
reg   [3:0] add_ln29_reg_547;
reg   [3:0] add_ln29_reg_547_pp0_iter2_reg;
wire   [31:0] tmp_6_fu_335_p6;
reg   [31:0] tmp_6_reg_572;
wire   [31:0] tmp_7_fu_348_p6;
reg   [31:0] tmp_7_reg_577;
wire   [47:0] grp_fu_329_p2;
reg   [47:0] mul_ln1273_3_reg_582;
reg   [31:0] tmp_8_reg_587;
wire   [47:0] grp_fu_378_p2;
reg   [47:0] mul_ln1273_4_reg_612;
reg   [31:0] tmp_9_reg_617;
wire   [47:0] grp_fu_391_p2;
reg   [47:0] mul_ln1273_5_reg_622;
reg   [31:0] trunc_ln818_s_reg_627;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] j_cast_fu_183_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln1273_8_fu_198_p1;
wire   [63:0] zext_ln1273_9_fu_235_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln1273_10_fu_249_p1;
wire   [63:0] zext_ln29_fu_464_p1;
reg   [2:0] j_fu_62;
wire   [2:0] add_ln28_fu_282_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_load;
reg   [2:0] i_1_fu_66;
wire   [2:0] select_ln27_1_fu_217_p3;
reg   [4:0] indvar_flatten_fu_70;
wire   [4:0] add_ln27_1_fu_160_p2;
reg   [4:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [3:0] add_ln1273_fu_192_p2;
wire   [2:0] add_ln27_fu_211_p2;
wire   [3:0] tmp_14_cast_fu_228_p3;
wire   [2:0] xor_ln1273_fu_240_p2;
wire  signed [3:0] sext_ln1273_fu_245_p1;
wire   [3:0] tmp_s_fu_297_p3;
wire   [31:0] grp_fu_316_p1;
wire   [31:0] grp_fu_329_p1;
wire   [47:0] grp_fu_316_p2;
wire   [31:0] grp_fu_378_p1;
wire   [31:0] grp_fu_391_p1;
wire   [47:0] shl_ln838_7_fu_397_p3;
wire   [47:0] add_ln1347_3_fu_404_p2;
wire   [47:0] shl_ln838_8_fu_419_p3;
wire   [47:0] add_ln1347_fu_426_p2;
wire   [31:0] tmp_10_fu_431_p4;
wire   [47:0] shl_ln838_9_fu_441_p3;
wire   [47:0] add_ln1347_4_fu_449_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage0;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to3;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [47:0] grp_fu_316_p10;
wire   [47:0] grp_fu_329_p10;
wire   [47:0] grp_fu_378_p10;
wire   [47:0] grp_fu_391_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

kalman_filter_top_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U19(
    .din0(32'd65536),
    .din1(32'd0),
    .din2(32'd0),
    .din3(32'd0),
    .din4(trunc_ln29_fu_224_p1),
    .dout(tmp_4_fu_254_p6)
);

kalman_filter_top_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U20(
    .din0(32'd0),
    .din1(32'd65536),
    .din2(32'd0),
    .din3(32'd0),
    .din4(trunc_ln29_fu_224_p1),
    .dout(tmp_5_fu_268_p6)
);

kalman_filter_top_mul_32s_32ns_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32ns_48_2_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_128),
    .din1(grp_fu_316_p1),
    .ce(1'b1),
    .dout(grp_fu_316_p2)
);

kalman_filter_top_mul_32s_32ns_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32ns_48_2_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_132),
    .din1(grp_fu_329_p1),
    .ce(1'b1),
    .dout(grp_fu_329_p2)
);

kalman_filter_top_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U23(
    .din0(32'd65536),
    .din1(32'd0),
    .din2(32'd65536),
    .din3(32'd0),
    .din4(trunc_ln29_reg_520),
    .dout(tmp_6_fu_335_p6)
);

kalman_filter_top_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U24(
    .din0(32'd0),
    .din1(32'd65536),
    .din2(32'd0),
    .din3(32'd65536),
    .din4(trunc_ln29_reg_520),
    .dout(tmp_7_fu_348_p6)
);

kalman_filter_top_mul_32s_32ns_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32ns_48_2_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_128),
    .din1(grp_fu_378_p1),
    .ce(1'b1),
    .dout(grp_fu_378_p2)
);

kalman_filter_top_mul_32s_32ns_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32ns_48_2_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_132),
    .din1(grp_fu_391_p1),
    .ce(1'b1),
    .dout(grp_fu_391_p2)
);

kalman_filter_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_fu_66 <= 3'd0;
    end else if (((icmp_ln27_reg_489 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_1_fu_66 <= select_ln27_1_fu_217_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln27_fu_154_p2 == 1'd0))) begin
            indvar_flatten_fu_70 <= add_ln27_1_fu_160_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_70 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_fu_62 <= 3'd0;
    end else if (((icmp_ln27_reg_489 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        j_fu_62 <= add_ln28_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln29_reg_547 <= add_ln29_fu_304_p2;
        add_ln29_reg_547_pp0_iter2_reg <= add_ln29_reg_547;
        icmp_ln27_reg_489 <= icmp_ln27_fu_154_p2;
        icmp_ln27_reg_489_pp0_iter1_reg <= icmp_ln27_reg_489;
        mul_ln1273_4_reg_612 <= grp_fu_378_p2;
        mul_ln1273_5_reg_622 <= grp_fu_391_p2;
        tmp_6_reg_572 <= tmp_6_fu_335_p6;
        tmp_7_reg_577 <= tmp_7_fu_348_p6;
        tmp_9_reg_617 <= {{add_ln1347_3_fu_404_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln27_fu_154_p2 == 1'd0))) begin
        icmp_ln28_reg_493 <= icmp_ln28_fu_169_p2;
        select_ln27_reg_498 <= select_ln27_fu_175_p3;
        zext_ln1273_reg_505[2 : 0] <= zext_ln1273_fu_188_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln1273_3_reg_582 <= grp_fu_329_p2;
        tmp_8_reg_587 <= {{grp_fu_316_p2[47:16]}};
        trunc_ln818_s_reg_627 <= {{add_ln1347_4_fu_449_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln27_reg_489 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_128 <= P_init_V_q1;
        reg_132 <= P_init_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_489 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_4_reg_537 <= tmp_4_fu_254_p6;
        tmp_5_reg_542 <= tmp_5_fu_268_p6;
        trunc_ln29_reg_520 <= trunc_ln29_fu_224_p1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            P_init_V_address0 = zext_ln1273_10_fu_249_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            P_init_V_address0 = zext_ln1273_8_fu_198_p1;
        end else begin
            P_init_V_address0 = 'bx;
        end
    end else begin
        P_init_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            P_init_V_address1 = zext_ln1273_9_fu_235_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            P_init_V_address1 = j_cast_fu_183_p1;
        end else begin
            P_init_V_address1 = 'bx;
        end
    end else begin
        P_init_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        P_init_V_ce0 = 1'b1;
    end else begin
        P_init_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        P_init_V_ce1 = 1'b1;
    end else begin
        P_init_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        P_prior_V_ce0 = 1'b1;
    end else begin
        P_prior_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        P_prior_V_we0 = 1'b1;
    end else begin
        P_prior_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_489 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln27_reg_489_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_62;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign P_prior_V_address0 = zext_ln29_fu_464_p1;

assign P_prior_V_d0 = trunc_ln818_s_reg_627;

assign add_ln1273_fu_192_p2 = (zext_ln1273_fu_188_p1 + 4'd4);

assign add_ln1347_3_fu_404_p2 = (shl_ln838_7_fu_397_p3 + mul_ln1273_3_reg_582);

assign add_ln1347_4_fu_449_p2 = (shl_ln838_9_fu_441_p3 + mul_ln1273_5_reg_622);

assign add_ln1347_fu_426_p2 = (shl_ln838_8_fu_419_p3 + mul_ln1273_4_reg_612);

assign add_ln27_1_fu_160_p2 = (ap_sig_allocacmp_indvar_flatten_load + 5'd1);

assign add_ln27_fu_211_p2 = (i_1_fu_66 + 3'd1);

assign add_ln28_fu_282_p2 = (select_ln27_reg_498 + 3'd1);

assign add_ln29_fu_304_p2 = (tmp_s_fu_297_p3 + zext_ln1273_reg_505);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign grp_fu_316_p1 = grp_fu_316_p10;

assign grp_fu_316_p10 = tmp_4_reg_537;

assign grp_fu_329_p1 = grp_fu_329_p10;

assign grp_fu_329_p10 = tmp_5_reg_542;

assign grp_fu_378_p1 = grp_fu_378_p10;

assign grp_fu_378_p10 = tmp_6_reg_572;

assign grp_fu_391_p1 = grp_fu_391_p10;

assign grp_fu_391_p10 = tmp_7_reg_577;

assign icmp_ln27_fu_154_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_169_p2 = ((ap_sig_allocacmp_j_load == 3'd4) ? 1'b1 : 1'b0);

assign j_cast_fu_183_p1 = select_ln27_fu_175_p3;

assign select_ln27_1_fu_217_p3 = ((icmp_ln28_reg_493[0:0] == 1'b1) ? add_ln27_fu_211_p2 : i_1_fu_66);

assign select_ln27_fu_175_p3 = ((icmp_ln28_fu_169_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_load);

assign sext_ln1273_fu_245_p1 = $signed(xor_ln1273_fu_240_p2);

assign shl_ln838_7_fu_397_p3 = {{tmp_8_reg_587}, {16'd0}};

assign shl_ln838_8_fu_419_p3 = {{tmp_9_reg_617}, {16'd0}};

assign shl_ln838_9_fu_441_p3 = {{tmp_10_fu_431_p4}, {16'd0}};

assign tmp_10_fu_431_p4 = {{add_ln1347_fu_426_p2[47:16]}};

assign tmp_14_cast_fu_228_p3 = {{1'd1}, {select_ln27_reg_498}};

assign tmp_s_fu_297_p3 = {{trunc_ln29_reg_520}, {2'd0}};

assign trunc_ln29_fu_224_p1 = select_ln27_1_fu_217_p3[1:0];

assign xor_ln1273_fu_240_p2 = (select_ln27_reg_498 ^ 3'd4);

assign zext_ln1273_10_fu_249_p1 = $unsigned(sext_ln1273_fu_245_p1);

assign zext_ln1273_8_fu_198_p1 = add_ln1273_fu_192_p2;

assign zext_ln1273_9_fu_235_p1 = tmp_14_cast_fu_228_p3;

assign zext_ln1273_fu_188_p1 = select_ln27_fu_175_p3;

assign zext_ln29_fu_464_p1 = add_ln29_reg_547_pp0_iter2_reg;

always @ (posedge ap_clk) begin
    zext_ln1273_reg_505[3] <= 1'b0;
end

endmodule //kalman_filter_top_kalman_filter_top_Pipeline_VITIS_LOOP_27_3_VITIS_LOOP_28_4
