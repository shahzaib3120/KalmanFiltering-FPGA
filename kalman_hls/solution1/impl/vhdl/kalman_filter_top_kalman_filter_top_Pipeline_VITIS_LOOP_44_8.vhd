-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kalman_filter_top_kalman_filter_top_Pipeline_VITIS_LOOP_44_8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    z_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    z_ce0 : OUT STD_LOGIC;
    z_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln1348 : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln1348_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln1348_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln1348_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_V_1_0257_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_V_1_0257_out_ap_vld : OUT STD_LOGIC;
    y_V_0_0256_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_V_0_0256_out_ap_vld : OUT STD_LOGIC;
    H_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    H_ce0 : OUT STD_LOGIC;
    H_q0 : IN STD_LOGIC_VECTOR (16 downto 0);
    H_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    H_ce1 : OUT STD_LOGIC;
    H_q1 : IN STD_LOGIC_VECTOR (16 downto 0);
    H_address2 : OUT STD_LOGIC_VECTOR (2 downto 0);
    H_ce2 : OUT STD_LOGIC;
    H_q2 : IN STD_LOGIC_VECTOR (16 downto 0);
    H_address3 : OUT STD_LOGIC_VECTOR (2 downto 0);
    H_ce3 : OUT STD_LOGIC;
    H_q3 : IN STD_LOGIC_VECTOR (16 downto 0);
    grp_fu_793_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_793_p_din1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    grp_fu_793_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
    grp_fu_793_p_ce : OUT STD_LOGIC;
    grp_fu_797_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_797_p_din1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    grp_fu_797_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
    grp_fu_797_p_ce : OUT STD_LOGIC;
    grp_fu_801_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_801_p_din1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    grp_fu_801_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
    grp_fu_801_p_ce : OUT STD_LOGIC;
    grp_fu_805_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_805_p_din1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    grp_fu_805_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
    grp_fu_805_p_ce : OUT STD_LOGIC );
end;


architecture behav of kalman_filter_top_kalman_filter_top_Pipeline_VITIS_LOOP_44_8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln44_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln1348_3_cast_fu_190_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1348_3_cast_reg_464 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1348_2_cast_fu_194_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1348_2_cast_reg_469 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1348_1_cast_fu_198_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1348_1_cast_reg_474 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1348_cast_fu_202_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1348_cast_reg_479 : STD_LOGIC_VECTOR (47 downto 0);
    signal i_reg_484 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_484_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_fu_214_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_489 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_489_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_489_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_489_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_489_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_495_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_495_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_495_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_230_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_reg_499 : STD_LOGIC_VECTOR (2 downto 0);
    signal H_load_reg_525 : STD_LOGIC_VECTOR (16 downto 0);
    signal H_load_1_reg_530 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1348_fu_283_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln1348_1_fu_291_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal H_load_2_reg_550 : STD_LOGIC_VECTOR (16 downto 0);
    signal H_load_3_reg_555 : STD_LOGIC_VECTOR (16 downto 0);
    signal z_load_reg_560 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1348_reg_565 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln1348_1_reg_570 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln1348_2_fu_299_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln1348_3_fu_307_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln1348_2_reg_585 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_5_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1348_3_reg_595 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln1271_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1271_4_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_5_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_6_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_fu_78 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln44_fu_224_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (1 downto 0);
    signal y_V_1_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_V_1_6_fu_418_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_V_1_3_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_V_1_5_fu_411_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal or_ln1271_fu_243_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln1271_1_fu_259_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln1271_2_fu_269_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln838_3_fu_315_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal sub_ln1348_fu_322_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_4_fu_327_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln838_4_fu_337_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal sub_ln1348_1_fu_345_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal shl_ln838_5_fu_366_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal sub_ln1348_2_fu_373_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_6_fu_378_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln838_6_fu_388_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal sub_ln1348_3_fu_396_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal y_V_0_fu_401_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kalman_filter_top_mul_32s_17ns_48_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component kalman_filter_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component kalman_filter_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    i_3_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln44_fu_218_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_3_fu_78 <= add_ln44_fu_224_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_3_fu_78 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                H_load_1_reg_530 <= H_q2;
                H_load_reg_525 <= H_q3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                H_load_2_reg_550 <= H_q1;
                H_load_3_reg_555 <= H_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_reg_489 <= empty_fu_214_p1;
                empty_reg_489_pp0_iter1_reg <= empty_reg_489;
                i_reg_484 <= ap_sig_allocacmp_i;
                i_reg_484_pp0_iter1_reg <= i_reg_484;
                icmp_ln44_reg_495 <= icmp_ln44_fu_218_p2;
                icmp_ln44_reg_495_pp0_iter1_reg <= icmp_ln44_reg_495;
                sext_ln1348_1_cast_reg_474 <= sext_ln1348_1_cast_fu_198_p1;
                sext_ln1348_2_cast_reg_469 <= sext_ln1348_2_cast_fu_194_p1;
                sext_ln1348_3_cast_reg_464 <= sext_ln1348_3_cast_fu_190_p1;
                sext_ln1348_cast_reg_479 <= sext_ln1348_cast_fu_202_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                empty_reg_489_pp0_iter2_reg <= empty_reg_489_pp0_iter1_reg;
                empty_reg_489_pp0_iter3_reg <= empty_reg_489_pp0_iter2_reg;
                empty_reg_489_pp0_iter4_reg <= empty_reg_489_pp0_iter3_reg;
                icmp_ln44_reg_495_pp0_iter2_reg <= icmp_ln44_reg_495_pp0_iter1_reg;
                icmp_ln44_reg_495_pp0_iter3_reg <= icmp_ln44_reg_495_pp0_iter2_reg;
                mul_ln1348_1_reg_570 <= grp_fu_797_p_dout0;
                mul_ln1348_2_reg_585 <= grp_fu_801_p_dout0;
                mul_ln1348_3_reg_595 <= grp_fu_805_p_dout0;
                mul_ln1348_reg_565 <= grp_fu_793_p_dout0;
                tmp_5_reg_590 <= sub_ln1348_1_fu_345_p2(47 downto 16);
                z_load_reg_560 <= z_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_218_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    tmp_s_reg_499(2) <= tmp_s_fu_230_p3(2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                y_V_1_3_fu_86 <= y_V_1_5_fu_411_p3;
                y_V_1_fu_82 <= y_V_1_6_fu_418_p3;
            end if;
        end if;
    end process;
    tmp_s_reg_499(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    H_address0 <= zext_ln1271_6_fu_274_p1(3 - 1 downto 0);
    H_address1 <= zext_ln1271_5_fu_264_p1(3 - 1 downto 0);
    H_address2 <= zext_ln1271_4_fu_249_p1(3 - 1 downto 0);
    H_address3 <= zext_ln1271_fu_238_p1(3 - 1 downto 0);

    H_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            H_ce0 <= ap_const_logic_1;
        else 
            H_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    H_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            H_ce1 <= ap_const_logic_1;
        else 
            H_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    H_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            H_ce2 <= ap_const_logic_1;
        else 
            H_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    H_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            H_ce3 <= ap_const_logic_1;
        else 
            H_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln44_fu_224_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln44_fu_218_p2)
    begin
        if (((icmp_ln44_fu_218_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_3_fu_78, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i <= i_3_fu_78;
        end if; 
    end process;

    empty_fu_214_p1 <= ap_sig_allocacmp_i(1 - 1 downto 0);
    grp_fu_793_p_ce <= ap_const_logic_1;
    grp_fu_793_p_din0 <= sext_ln1348_cast_reg_479(32 - 1 downto 0);
    grp_fu_793_p_din1 <= zext_ln1348_fu_283_p1(17 - 1 downto 0);
    grp_fu_797_p_ce <= ap_const_logic_1;
    grp_fu_797_p_din0 <= sext_ln1348_1_cast_reg_474(32 - 1 downto 0);
    grp_fu_797_p_din1 <= zext_ln1348_1_fu_291_p1(17 - 1 downto 0);
    grp_fu_801_p_ce <= ap_const_logic_1;
    grp_fu_801_p_din0 <= sext_ln1348_2_cast_reg_469(32 - 1 downto 0);
    grp_fu_801_p_din1 <= zext_ln1348_2_fu_299_p1(17 - 1 downto 0);
    grp_fu_805_p_ce <= ap_const_logic_1;
    grp_fu_805_p_din0 <= sext_ln1348_3_cast_reg_464(32 - 1 downto 0);
    grp_fu_805_p_din1 <= zext_ln1348_3_fu_307_p1(17 - 1 downto 0);
    i_3_cast_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_484_pp0_iter1_reg),64));
    icmp_ln44_fu_218_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv2_2) else "0";
    or_ln1271_1_fu_259_p2 <= (tmp_s_reg_499 or ap_const_lv3_2);
    or_ln1271_2_fu_269_p2 <= (tmp_s_reg_499 or ap_const_lv3_3);
    or_ln1271_fu_243_p2 <= (tmp_s_fu_230_p3 or ap_const_lv3_1);
        sext_ln1348_1_cast_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1348_1),48));

        sext_ln1348_2_cast_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1348_2),48));

        sext_ln1348_3_cast_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1348_3),48));

        sext_ln1348_cast_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1348),48));

    shl_ln838_3_fu_315_p3 <= (z_load_reg_560 & ap_const_lv16_0);
    shl_ln838_4_fu_337_p3 <= (tmp_4_fu_327_p4 & ap_const_lv16_0);
    shl_ln838_5_fu_366_p3 <= (tmp_5_reg_590 & ap_const_lv16_0);
    shl_ln838_6_fu_388_p3 <= (tmp_6_fu_378_p4 & ap_const_lv16_0);
    sub_ln1348_1_fu_345_p2 <= std_logic_vector(unsigned(shl_ln838_4_fu_337_p3) - unsigned(mul_ln1348_1_reg_570));
    sub_ln1348_2_fu_373_p2 <= std_logic_vector(unsigned(shl_ln838_5_fu_366_p3) - unsigned(mul_ln1348_2_reg_585));
    sub_ln1348_3_fu_396_p2 <= std_logic_vector(unsigned(shl_ln838_6_fu_388_p3) - unsigned(mul_ln1348_3_reg_595));
    sub_ln1348_fu_322_p2 <= std_logic_vector(unsigned(shl_ln838_3_fu_315_p3) - unsigned(mul_ln1348_reg_565));
    tmp_4_fu_327_p4 <= sub_ln1348_fu_322_p2(47 downto 16);
    tmp_6_fu_378_p4 <= sub_ln1348_2_fu_373_p2(47 downto 16);
    tmp_s_fu_230_p3 <= (empty_fu_214_p1 & ap_const_lv2_0);
    y_V_0_0256_out <= y_V_1_fu_82;

    y_V_0_0256_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln44_reg_495_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln44_reg_495_pp0_iter3_reg = ap_const_lv1_1))) then 
            y_V_0_0256_out_ap_vld <= ap_const_logic_1;
        else 
            y_V_0_0256_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_V_0_fu_401_p4 <= sub_ln1348_3_fu_396_p2(47 downto 16);
    y_V_1_0257_out <= y_V_1_3_fu_86;

    y_V_1_0257_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln44_reg_495_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln44_reg_495_pp0_iter3_reg = ap_const_lv1_1))) then 
            y_V_1_0257_out_ap_vld <= ap_const_logic_1;
        else 
            y_V_1_0257_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_V_1_5_fu_411_p3 <= 
        y_V_0_fu_401_p4 when (empty_reg_489_pp0_iter4_reg(0) = '1') else 
        y_V_1_3_fu_86;
    y_V_1_6_fu_418_p3 <= 
        y_V_1_fu_82 when (empty_reg_489_pp0_iter4_reg(0) = '1') else 
        y_V_0_fu_401_p4;
    z_address0 <= i_3_cast_fu_279_p1(1 - 1 downto 0);

    z_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            z_ce0 <= ap_const_logic_1;
        else 
            z_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1271_4_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1271_fu_243_p2),64));
    zext_ln1271_5_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1271_1_fu_259_p2),64));
    zext_ln1271_6_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1271_2_fu_269_p2),64));
    zext_ln1271_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_230_p3),64));
    zext_ln1348_1_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(H_load_1_reg_530),48));
    zext_ln1348_2_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(H_load_2_reg_550),48));
    zext_ln1348_3_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(H_load_3_reg_555),48));
    zext_ln1348_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(H_load_reg_525),48));
end behav;
