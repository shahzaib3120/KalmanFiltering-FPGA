// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kalman_filter_top_kalman_filter_top_Pipeline_VITIS_LOOP_89_19_VITIS_LOOP_90_20 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        K_V_address0,
        K_V_ce0,
        K_V_q0,
        K_V_address1,
        K_V_ce1,
        K_V_q1,
        temp_V_address0,
        temp_V_ce0,
        temp_V_we0,
        temp_V_d0,
        H_address0,
        H_ce0,
        H_q0,
        H_address1,
        H_ce1,
        H_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] K_V_address0;
output   K_V_ce0;
input  [31:0] K_V_q0;
output  [2:0] K_V_address1;
output   K_V_ce1;
input  [31:0] K_V_q1;
output  [3:0] temp_V_address0;
output   temp_V_ce0;
output   temp_V_we0;
output  [31:0] temp_V_d0;
output  [2:0] H_address0;
output   H_ce0;
input  [16:0] H_q0;
output  [2:0] H_address1;
output   H_ce1;
input  [16:0] H_q1;

reg ap_idle;
reg K_V_ce0;
reg K_V_ce1;
reg temp_V_ce0;
reg temp_V_we0;
reg H_ce0;
reg H_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln89_fu_156_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] select_ln89_fu_183_p3;
reg   [2:0] select_ln89_reg_381;
reg   [2:0] select_ln89_reg_381_pp0_iter1_reg;
reg   [2:0] select_ln89_reg_381_pp0_iter2_reg;
reg   [2:0] select_ln89_reg_381_pp0_iter3_reg;
wire   [1:0] trunc_ln91_fu_205_p1;
reg   [1:0] trunc_ln91_reg_386;
reg   [1:0] trunc_ln91_reg_386_pp0_iter1_reg;
reg   [1:0] trunc_ln91_reg_386_pp0_iter2_reg;
reg   [1:0] trunc_ln91_reg_386_pp0_iter3_reg;
reg  signed [31:0] K_V_load_reg_411;
reg  signed [31:0] K_V_load_1_reg_416;
reg   [16:0] H_load_reg_421;
reg   [16:0] H_load_1_reg_426;
wire   [47:0] grp_fu_296_p2;
reg   [47:0] mul_ln1347_reg_451;
reg   [31:0] tmp_1_reg_456;
wire   [63:0] zext_ln89_fu_217_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln1271_fu_236_p1;
wire   [63:0] j_4_cast_fu_241_p1;
wire   [63:0] zext_ln1273_1_fu_252_p1;
wire   [63:0] zext_ln91_fu_328_p1;
reg   [2:0] j_fu_54;
wire   [2:0] add_ln90_fu_257_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_load;
reg   [2:0] i_fu_58;
wire   [2:0] select_ln89_1_fu_197_p3;
reg   [2:0] ap_sig_allocacmp_i_1;
reg   [4:0] indvar_flatten45_fu_62;
wire   [4:0] add_ln89_1_fu_162_p2;
reg   [4:0] ap_sig_allocacmp_indvar_flatten45_load;
wire   [0:0] icmp_ln90_fu_177_p2;
wire   [2:0] add_ln89_fu_171_p2;
wire   [2:0] shl_ln1271_1_fu_191_p2;
wire   [2:0] shl_ln1271_fu_150_p2;
wire   [2:0] select_ln89_2_fu_209_p3;
wire   [2:0] select_ln89_4_fu_222_p3;
wire   [2:0] or_ln89_fu_230_p2;
wire   [2:0] xor_ln1273_fu_246_p2;
wire   [16:0] grp_fu_287_p0;
wire   [16:0] grp_fu_296_p0;
wire   [47:0] grp_fu_287_p2;
wire   [3:0] tmp_s_fu_312_p3;
wire   [3:0] zext_ln1273_fu_319_p1;
wire   [3:0] add_ln91_fu_322_p2;
wire   [47:0] shl_ln838_s_fu_333_p3;
wire   [47:0] add_ln1347_fu_340_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [47:0] grp_fu_287_p00;
wire   [47:0] grp_fu_296_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

kalman_filter_top_mul_17ns_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_17ns_32s_48_2_1_U80(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_287_p0),
    .din1(K_V_load_reg_411),
    .ce(1'b1),
    .dout(grp_fu_287_p2)
);

kalman_filter_top_mul_17ns_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_17ns_32s_48_2_1_U81(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_296_p0),
    .din1(K_V_load_1_reg_416),
    .ce(1'b1),
    .dout(grp_fu_296_p2)
);

kalman_filter_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln89_fu_156_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_58 <= select_ln89_1_fu_197_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_58 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln89_fu_156_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten45_fu_62 <= add_ln89_1_fu_162_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten45_fu_62 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln89_fu_156_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_54 <= add_ln90_fu_257_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_54 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        H_load_1_reg_426 <= H_q0;
        H_load_reg_421 <= H_q1;
        K_V_load_1_reg_416 <= K_V_q0;
        K_V_load_reg_411 <= K_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln89_reg_381_pp0_iter1_reg <= select_ln89_reg_381;
        trunc_ln91_reg_386_pp0_iter1_reg <= trunc_ln91_reg_386;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        mul_ln1347_reg_451 <= grp_fu_296_p2;
        select_ln89_reg_381_pp0_iter2_reg <= select_ln89_reg_381_pp0_iter1_reg;
        select_ln89_reg_381_pp0_iter3_reg <= select_ln89_reg_381_pp0_iter2_reg;
        tmp_1_reg_456 <= {{grp_fu_287_p2[47:16]}};
        trunc_ln91_reg_386_pp0_iter2_reg <= trunc_ln91_reg_386_pp0_iter1_reg;
        trunc_ln91_reg_386_pp0_iter3_reg <= trunc_ln91_reg_386_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln89_fu_156_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln89_reg_381 <= select_ln89_fu_183_p3;
        trunc_ln91_reg_386 <= trunc_ln91_fu_205_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        H_ce0 = 1'b1;
    end else begin
        H_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        H_ce1 = 1'b1;
    end else begin
        H_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        K_V_ce0 = 1'b1;
    end else begin
        K_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        K_V_ce1 = 1'b1;
    end else begin
        K_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln89_fu_156_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten45_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten45_load = indvar_flatten45_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        temp_V_ce0 = 1'b1;
    end else begin
        temp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        temp_V_we0 = 1'b1;
    end else begin
        temp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign H_address0 = zext_ln1273_1_fu_252_p1;

assign H_address1 = j_4_cast_fu_241_p1;

assign K_V_address0 = zext_ln1271_fu_236_p1;

assign K_V_address1 = zext_ln89_fu_217_p1;

assign add_ln1347_fu_340_p2 = (shl_ln838_s_fu_333_p3 + mul_ln1347_reg_451);

assign add_ln89_1_fu_162_p2 = (ap_sig_allocacmp_indvar_flatten45_load + 5'd1);

assign add_ln89_fu_171_p2 = (ap_sig_allocacmp_i_1 + 3'd1);

assign add_ln90_fu_257_p2 = (select_ln89_fu_183_p3 + 3'd1);

assign add_ln91_fu_322_p2 = (tmp_s_fu_312_p3 + zext_ln1273_fu_319_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_287_p0 = grp_fu_287_p00;

assign grp_fu_287_p00 = H_load_reg_421;

assign grp_fu_296_p0 = grp_fu_296_p00;

assign grp_fu_296_p00 = H_load_1_reg_426;

assign icmp_ln89_fu_156_p2 = ((ap_sig_allocacmp_indvar_flatten45_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_177_p2 = ((ap_sig_allocacmp_j_load == 3'd4) ? 1'b1 : 1'b0);

assign j_4_cast_fu_241_p1 = select_ln89_fu_183_p3;

assign or_ln89_fu_230_p2 = (select_ln89_4_fu_222_p3 | 3'd1);

assign select_ln89_1_fu_197_p3 = ((icmp_ln90_fu_177_p2[0:0] == 1'b1) ? add_ln89_fu_171_p2 : ap_sig_allocacmp_i_1);

assign select_ln89_2_fu_209_p3 = ((icmp_ln90_fu_177_p2[0:0] == 1'b1) ? shl_ln1271_1_fu_191_p2 : shl_ln1271_fu_150_p2);

assign select_ln89_4_fu_222_p3 = ((icmp_ln90_fu_177_p2[0:0] == 1'b1) ? shl_ln1271_1_fu_191_p2 : shl_ln1271_fu_150_p2);

assign select_ln89_fu_183_p3 = ((icmp_ln90_fu_177_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_load);

assign shl_ln1271_1_fu_191_p2 = add_ln89_fu_171_p2 << 3'd1;

assign shl_ln1271_fu_150_p2 = ap_sig_allocacmp_i_1 << 3'd1;

assign shl_ln838_s_fu_333_p3 = {{tmp_1_reg_456}, {16'd0}};

assign temp_V_address0 = zext_ln91_fu_328_p1;

assign temp_V_d0 = {{add_ln1347_fu_340_p2[47:16]}};

assign tmp_s_fu_312_p3 = {{trunc_ln91_reg_386_pp0_iter3_reg}, {2'd0}};

assign trunc_ln91_fu_205_p1 = select_ln89_1_fu_197_p3[1:0];

assign xor_ln1273_fu_246_p2 = (select_ln89_fu_183_p3 ^ 3'd4);

assign zext_ln1271_fu_236_p1 = or_ln89_fu_230_p2;

assign zext_ln1273_1_fu_252_p1 = xor_ln1273_fu_246_p2;

assign zext_ln1273_fu_319_p1 = select_ln89_reg_381_pp0_iter3_reg;

assign zext_ln89_fu_217_p1 = select_ln89_2_fu_209_p3;

assign zext_ln91_fu_328_p1 = add_ln91_fu_322_p2;

endmodule //kalman_filter_top_kalman_filter_top_Pipeline_VITIS_LOOP_89_19_VITIS_LOOP_90_20
