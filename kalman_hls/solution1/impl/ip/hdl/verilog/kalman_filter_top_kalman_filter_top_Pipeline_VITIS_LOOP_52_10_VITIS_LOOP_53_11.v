// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kalman_filter_top_kalman_filter_top_Pipeline_VITIS_LOOP_52_10_VITIS_LOOP_53_11 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        P_prior_V_address0,
        P_prior_V_ce0,
        P_prior_V_q0,
        P_prior_V_address1,
        P_prior_V_ce1,
        P_prior_V_q1,
        P_prior_V_address2,
        P_prior_V_ce2,
        P_prior_V_q2,
        P_prior_V_address3,
        P_prior_V_ce3,
        P_prior_V_q3,
        S_V_1_1_1_out,
        S_V_1_1_1_out_ap_vld,
        S_V_1_0_1_out,
        S_V_1_0_1_out_ap_vld,
        S_V_0_1_1_out,
        S_V_0_1_1_out_ap_vld,
        S_V_0_0_1_out,
        S_V_0_0_1_out_ap_vld,
        H_address0,
        H_ce0,
        H_q0,
        H_address1,
        H_ce1,
        H_q1,
        H_address2,
        H_ce2,
        H_q2,
        H_address3,
        H_ce3,
        H_q3,
        grp_fu_793_p_din0,
        grp_fu_793_p_din1,
        grp_fu_793_p_dout0,
        grp_fu_793_p_ce,
        grp_fu_797_p_din0,
        grp_fu_797_p_din1,
        grp_fu_797_p_dout0,
        grp_fu_797_p_ce,
        grp_fu_801_p_din0,
        grp_fu_801_p_din1,
        grp_fu_801_p_dout0,
        grp_fu_801_p_ce,
        grp_fu_805_p_din0,
        grp_fu_805_p_din1,
        grp_fu_805_p_dout0,
        grp_fu_805_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] P_prior_V_address0;
output   P_prior_V_ce0;
input  [31:0] P_prior_V_q0;
output  [3:0] P_prior_V_address1;
output   P_prior_V_ce1;
input  [31:0] P_prior_V_q1;
output  [3:0] P_prior_V_address2;
output   P_prior_V_ce2;
input  [31:0] P_prior_V_q2;
output  [3:0] P_prior_V_address3;
output   P_prior_V_ce3;
input  [31:0] P_prior_V_q3;
output  [31:0] S_V_1_1_1_out;
output   S_V_1_1_1_out_ap_vld;
output  [31:0] S_V_1_0_1_out;
output   S_V_1_0_1_out_ap_vld;
output  [31:0] S_V_0_1_1_out;
output   S_V_0_1_1_out_ap_vld;
output  [31:0] S_V_0_0_1_out;
output   S_V_0_0_1_out_ap_vld;
output  [2:0] H_address0;
output   H_ce0;
input  [16:0] H_q0;
output  [2:0] H_address1;
output   H_ce1;
input  [16:0] H_q1;
output  [2:0] H_address2;
output   H_ce2;
input  [16:0] H_q2;
output  [2:0] H_address3;
output   H_ce3;
input  [16:0] H_q3;
output  [31:0] grp_fu_793_p_din0;
output  [16:0] grp_fu_793_p_din1;
input  [47:0] grp_fu_793_p_dout0;
output   grp_fu_793_p_ce;
output  [31:0] grp_fu_797_p_din0;
output  [16:0] grp_fu_797_p_din1;
input  [47:0] grp_fu_797_p_dout0;
output   grp_fu_797_p_ce;
output  [31:0] grp_fu_801_p_din0;
output  [16:0] grp_fu_801_p_din1;
input  [47:0] grp_fu_801_p_dout0;
output   grp_fu_801_p_ce;
output  [31:0] grp_fu_805_p_din0;
output  [16:0] grp_fu_805_p_din1;
input  [47:0] grp_fu_805_p_dout0;
output   grp_fu_805_p_ce;

reg ap_idle;
reg P_prior_V_ce0;
reg P_prior_V_ce1;
reg P_prior_V_ce2;
reg P_prior_V_ce3;
reg S_V_1_1_1_out_ap_vld;
reg S_V_1_0_1_out_ap_vld;
reg S_V_0_1_1_out_ap_vld;
reg S_V_0_0_1_out_ap_vld;
reg H_ce0;
reg H_ce1;
reg H_ce2;
reg H_ce3;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln52_fu_259_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln52_reg_765;
reg   [0:0] icmp_ln52_reg_765_pp0_iter1_reg;
reg   [0:0] icmp_ln52_reg_765_pp0_iter2_reg;
reg   [0:0] icmp_ln52_reg_765_pp0_iter3_reg;
wire   [0:0] trunc_ln52_1_fu_314_p1;
reg   [0:0] trunc_ln52_1_reg_769;
reg   [0:0] trunc_ln52_1_reg_769_pp0_iter1_reg;
reg   [0:0] trunc_ln52_1_reg_769_pp0_iter2_reg;
reg   [0:0] trunc_ln52_1_reg_769_pp0_iter3_reg;
reg   [0:0] trunc_ln52_1_reg_769_pp0_iter4_reg;
wire   [2:0] select_ln52_8_fu_369_p3;
reg   [2:0] select_ln52_8_reg_793;
wire   [0:0] trunc_ln54_fu_417_p1;
reg   [0:0] trunc_ln54_reg_818;
reg   [0:0] trunc_ln54_reg_818_pp0_iter1_reg;
reg   [0:0] trunc_ln54_reg_818_pp0_iter2_reg;
reg   [0:0] trunc_ln54_reg_818_pp0_iter3_reg;
reg   [0:0] trunc_ln54_reg_818_pp0_iter4_reg;
reg   [16:0] H_load_reg_828;
reg   [16:0] H_load_2_reg_833;
reg   [16:0] H_load_3_reg_838;
reg   [31:0] P_prior_V_load_1_reg_848;
reg   [31:0] P_prior_V_load_reg_853;
reg   [31:0] P_prior_V_load_2_reg_858;
reg   [31:0] P_prior_V_load_3_reg_863;
reg   [31:0] P_prior_V_load_3_reg_863_pp0_iter2_reg;
wire   [47:0] zext_ln52_1_fu_452_p1;
wire   [47:0] zext_ln52_2_fu_455_p1;
wire   [47:0] zext_ln52_3_fu_458_p1;
reg   [16:0] H_load_4_reg_883;
wire  signed [47:0] sext_ln818_fu_461_p1;
wire  signed [47:0] sext_ln1347_fu_470_p1;
wire  signed [47:0] sext_ln1347_1_fu_479_p1;
wire   [47:0] zext_ln52_4_fu_488_p1;
reg   [47:0] mul_ln1347_reg_908;
reg   [31:0] tmp_s_reg_913;
reg   [47:0] mul_ln1347_1_reg_918;
wire  signed [47:0] sext_ln1347_2_fu_501_p1;
reg   [47:0] mul_ln1347_2_reg_928;
reg   [31:0] tmp_3_reg_933;
wire   [63:0] zext_ln52_fu_326_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln1271_fu_345_p1;
wire   [63:0] zext_ln1271_2_fu_364_p1;
wire   [63:0] j_2_cast_fu_377_p1;
wire   [63:0] zext_ln1273_fu_390_p1;
wire   [63:0] zext_ln1273_2_fu_403_p1;
wire   [63:0] zext_ln1273_3_fu_412_p1;
wire   [63:0] zext_ln1271_3_fu_447_p1;
reg   [1:0] j_fu_72;
wire   [1:0] add_ln53_fu_421_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_j_load;
reg   [31:0] S_V_1_1_1_fu_76;
wire   [31:0] S_V_1_1_19_fu_673_p3;
reg   [31:0] S_V_1_1_9_fu_80;
wire   [31:0] S_V_1_1_18_fu_666_p3;
reg   [31:0] S_V_1_1_10_fu_84;
wire   [31:0] S_V_1_1_17_fu_659_p3;
reg   [31:0] S_V_1_1_11_fu_88;
wire   [31:0] S_V_1_1_16_fu_652_p3;
reg   [1:0] i_fu_92;
wire   [1:0] select_ln52_1_fu_306_p3;
reg   [1:0] ap_sig_allocacmp_i_4;
reg   [2:0] indvar_flatten27_fu_96;
wire   [2:0] add_ln52_1_fu_265_p2;
reg   [2:0] ap_sig_allocacmp_indvar_flatten27_load;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] trunc_ln1271_fu_247_p1;
wire   [1:0] add_ln52_fu_274_p2;
wire   [0:0] icmp_ln53_fu_284_p2;
wire   [0:0] trunc_ln52_fu_280_p1;
wire   [2:0] tmp_30_cast_fu_298_p3;
wire   [2:0] tmp_26_cast_fu_251_p3;
wire   [2:0] select_ln52_2_fu_318_p3;
wire   [2:0] select_ln52_6_fu_331_p3;
wire   [2:0] or_ln52_fu_339_p2;
wire   [2:0] select_ln52_7_fu_350_p3;
wire   [2:0] or_ln52_1_fu_358_p2;
wire   [1:0] select_ln52_fu_290_p3;
wire  signed [2:0] tmp_34_cast_fu_382_p3;
wire   [3:0] tmp_35_cast_fu_395_p3;
wire  signed [3:0] sext_ln1273_fu_408_p1;
wire   [2:0] or_ln52_2_fu_442_p2;
wire   [47:0] shl_ln838_s_fu_510_p3;
wire   [47:0] add_ln1347_fu_517_p2;
wire   [31:0] tmp_2_fu_522_p4;
wire   [47:0] shl_ln838_2_fu_532_p3;
wire   [47:0] add_ln1347_2_fu_540_p2;
wire   [47:0] shl_ln838_3_fu_567_p3;
wire   [47:0] add_ln1347_3_fu_574_p2;
wire   [11:0] select_ln813_1_fu_589_p3;
wire   [11:0] select_ln813_fu_596_p3;
wire   [11:0] select_ln54_fu_603_p3;
wire  signed [12:0] sext_ln813_fu_610_p1;
wire   [31:0] zext_ln813_fu_614_p1;
wire   [31:0] trunc_ln818_1_fu_579_p4;
wire   [31:0] S_V_1_0_fu_618_p2;
wire   [31:0] S_V_1_1_13_fu_624_p3;
wire   [31:0] S_V_1_1_14_fu_631_p3;
wire   [31:0] S_V_1_1_fu_638_p3;
wire   [31:0] S_V_1_1_15_fu_645_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

kalman_filter_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln52_fu_259_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_92 <= select_ln52_1_fu_306_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_92 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln52_fu_259_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten27_fu_96 <= add_ln52_1_fu_265_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten27_fu_96 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln52_fu_259_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_72 <= add_ln53_fu_421_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_72 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        H_load_2_reg_833 <= H_q2;
        H_load_3_reg_838 <= H_q1;
        H_load_reg_828 <= H_q3;
        P_prior_V_load_1_reg_848 <= P_prior_V_q3;
        P_prior_V_load_2_reg_858 <= P_prior_V_q1;
        P_prior_V_load_3_reg_863 <= P_prior_V_q0;
        P_prior_V_load_reg_853 <= P_prior_V_q2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        H_load_4_reg_883 <= H_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        P_prior_V_load_3_reg_863_pp0_iter2_reg <= P_prior_V_load_3_reg_863;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln52_reg_765_pp0_iter2_reg <= icmp_ln52_reg_765_pp0_iter1_reg;
        icmp_ln52_reg_765_pp0_iter3_reg <= icmp_ln52_reg_765_pp0_iter2_reg;
        mul_ln1347_1_reg_918 <= grp_fu_801_p_dout0;
        mul_ln1347_2_reg_928 <= grp_fu_805_p_dout0;
        mul_ln1347_reg_908 <= grp_fu_797_p_dout0;
        tmp_3_reg_933 <= {{add_ln1347_2_fu_540_p2[47:16]}};
        tmp_s_reg_913 <= {{grp_fu_793_p_dout0[47:16]}};
        trunc_ln52_1_reg_769_pp0_iter2_reg <= trunc_ln52_1_reg_769_pp0_iter1_reg;
        trunc_ln52_1_reg_769_pp0_iter3_reg <= trunc_ln52_1_reg_769_pp0_iter2_reg;
        trunc_ln52_1_reg_769_pp0_iter4_reg <= trunc_ln52_1_reg_769_pp0_iter3_reg;
        trunc_ln54_reg_818_pp0_iter2_reg <= trunc_ln54_reg_818_pp0_iter1_reg;
        trunc_ln54_reg_818_pp0_iter3_reg <= trunc_ln54_reg_818_pp0_iter2_reg;
        trunc_ln54_reg_818_pp0_iter4_reg <= trunc_ln54_reg_818_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        S_V_1_1_10_fu_84 <= S_V_1_1_17_fu_659_p3;
        S_V_1_1_11_fu_88 <= S_V_1_1_16_fu_652_p3;
        S_V_1_1_1_fu_76 <= S_V_1_1_19_fu_673_p3;
        S_V_1_1_9_fu_80 <= S_V_1_1_18_fu_666_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln52_reg_765 <= icmp_ln52_fu_259_p2;
        icmp_ln52_reg_765_pp0_iter1_reg <= icmp_ln52_reg_765;
        trunc_ln52_1_reg_769_pp0_iter1_reg <= trunc_ln52_1_reg_769;
        trunc_ln54_reg_818_pp0_iter1_reg <= trunc_ln54_reg_818;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_259_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln52_8_reg_793[2] <= select_ln52_8_fu_369_p3[2];
        trunc_ln52_1_reg_769 <= trunc_ln52_1_fu_314_p1;
        trunc_ln54_reg_818 <= trunc_ln54_fu_417_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        H_ce0 = 1'b1;
    end else begin
        H_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        H_ce1 = 1'b1;
    end else begin
        H_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        H_ce2 = 1'b1;
    end else begin
        H_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        H_ce3 = 1'b1;
    end else begin
        H_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        P_prior_V_ce0 = 1'b1;
    end else begin
        P_prior_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        P_prior_V_ce1 = 1'b1;
    end else begin
        P_prior_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        P_prior_V_ce2 = 1'b1;
    end else begin
        P_prior_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        P_prior_V_ce3 = 1'b1;
    end else begin
        P_prior_V_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln52_reg_765_pp0_iter3_reg == 1'd1))) begin
        S_V_0_0_1_out_ap_vld = 1'b1;
    end else begin
        S_V_0_0_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln52_reg_765_pp0_iter3_reg == 1'd1))) begin
        S_V_0_1_1_out_ap_vld = 1'b1;
    end else begin
        S_V_0_1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln52_reg_765_pp0_iter3_reg == 1'd1))) begin
        S_V_1_0_1_out_ap_vld = 1'b1;
    end else begin
        S_V_1_0_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln52_reg_765_pp0_iter3_reg == 1'd1))) begin
        S_V_1_1_1_out_ap_vld = 1'b1;
    end else begin
        S_V_1_1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln52_fu_259_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_4 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_4 = i_fu_92;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten27_load = 3'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten27_load = indvar_flatten27_fu_96;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 2'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_72;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign H_address0 = zext_ln1271_3_fu_447_p1;

assign H_address1 = zext_ln1271_2_fu_364_p1;

assign H_address2 = zext_ln1271_fu_345_p1;

assign H_address3 = zext_ln52_fu_326_p1;

assign P_prior_V_address0 = zext_ln1273_3_fu_412_p1;

assign P_prior_V_address1 = zext_ln1273_2_fu_403_p1;

assign P_prior_V_address2 = zext_ln1273_fu_390_p1;

assign P_prior_V_address3 = j_2_cast_fu_377_p1;

assign S_V_0_0_1_out = S_V_1_1_1_fu_76;

assign S_V_0_1_1_out = S_V_1_1_9_fu_80;

assign S_V_1_0_1_out = S_V_1_1_10_fu_84;

assign S_V_1_0_fu_618_p2 = (zext_ln813_fu_614_p1 + trunc_ln818_1_fu_579_p4);

assign S_V_1_1_13_fu_624_p3 = ((trunc_ln54_reg_818_pp0_iter4_reg[0:0] == 1'b1) ? S_V_1_0_fu_618_p2 : S_V_1_1_11_fu_88);

assign S_V_1_1_14_fu_631_p3 = ((trunc_ln54_reg_818_pp0_iter4_reg[0:0] == 1'b1) ? S_V_1_1_10_fu_84 : S_V_1_0_fu_618_p2);

assign S_V_1_1_15_fu_645_p3 = ((trunc_ln54_reg_818_pp0_iter4_reg[0:0] == 1'b1) ? S_V_1_1_1_fu_76 : S_V_1_0_fu_618_p2);

assign S_V_1_1_16_fu_652_p3 = ((trunc_ln52_1_reg_769_pp0_iter4_reg[0:0] == 1'b1) ? S_V_1_1_13_fu_624_p3 : S_V_1_1_11_fu_88);

assign S_V_1_1_17_fu_659_p3 = ((trunc_ln52_1_reg_769_pp0_iter4_reg[0:0] == 1'b1) ? S_V_1_1_14_fu_631_p3 : S_V_1_1_10_fu_84);

assign S_V_1_1_18_fu_666_p3 = ((trunc_ln52_1_reg_769_pp0_iter4_reg[0:0] == 1'b1) ? S_V_1_1_9_fu_80 : S_V_1_1_fu_638_p3);

assign S_V_1_1_19_fu_673_p3 = ((trunc_ln52_1_reg_769_pp0_iter4_reg[0:0] == 1'b1) ? S_V_1_1_1_fu_76 : S_V_1_1_15_fu_645_p3);

assign S_V_1_1_1_out = S_V_1_1_11_fu_88;

assign S_V_1_1_fu_638_p3 = ((trunc_ln54_reg_818_pp0_iter4_reg[0:0] == 1'b1) ? S_V_1_0_fu_618_p2 : S_V_1_1_9_fu_80);

assign add_ln1347_2_fu_540_p2 = (shl_ln838_2_fu_532_p3 + mul_ln1347_1_reg_918);

assign add_ln1347_3_fu_574_p2 = (shl_ln838_3_fu_567_p3 + mul_ln1347_2_reg_928);

assign add_ln1347_fu_517_p2 = (shl_ln838_s_fu_510_p3 + mul_ln1347_reg_908);

assign add_ln52_1_fu_265_p2 = (ap_sig_allocacmp_indvar_flatten27_load + 3'd1);

assign add_ln52_fu_274_p2 = (ap_sig_allocacmp_i_4 + 2'd1);

assign add_ln53_fu_421_p2 = (select_ln52_fu_290_p3 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_793_p_ce = 1'b1;

assign grp_fu_793_p_din0 = sext_ln818_fu_461_p1;

assign grp_fu_793_p_din1 = zext_ln52_1_fu_452_p1;

assign grp_fu_797_p_ce = 1'b1;

assign grp_fu_797_p_din0 = sext_ln1347_fu_470_p1;

assign grp_fu_797_p_din1 = zext_ln52_2_fu_455_p1;

assign grp_fu_801_p_ce = 1'b1;

assign grp_fu_801_p_din0 = sext_ln1347_1_fu_479_p1;

assign grp_fu_801_p_din1 = zext_ln52_3_fu_458_p1;

assign grp_fu_805_p_ce = 1'b1;

assign grp_fu_805_p_din0 = sext_ln1347_2_fu_501_p1;

assign grp_fu_805_p_din1 = zext_ln52_4_fu_488_p1;

assign icmp_ln52_fu_259_p2 = ((ap_sig_allocacmp_indvar_flatten27_load == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_284_p2 = ((ap_sig_allocacmp_j_load == 2'd2) ? 1'b1 : 1'b0);

assign j_2_cast_fu_377_p1 = select_ln52_fu_290_p3;

assign or_ln52_1_fu_358_p2 = (select_ln52_7_fu_350_p3 | 3'd2);

assign or_ln52_2_fu_442_p2 = (select_ln52_8_reg_793 | 3'd3);

assign or_ln52_fu_339_p2 = (select_ln52_6_fu_331_p3 | 3'd1);

assign select_ln52_1_fu_306_p3 = ((icmp_ln53_fu_284_p2[0:0] == 1'b1) ? add_ln52_fu_274_p2 : ap_sig_allocacmp_i_4);

assign select_ln52_2_fu_318_p3 = ((icmp_ln53_fu_284_p2[0:0] == 1'b1) ? tmp_30_cast_fu_298_p3 : tmp_26_cast_fu_251_p3);

assign select_ln52_6_fu_331_p3 = ((icmp_ln53_fu_284_p2[0:0] == 1'b1) ? tmp_30_cast_fu_298_p3 : tmp_26_cast_fu_251_p3);

assign select_ln52_7_fu_350_p3 = ((icmp_ln53_fu_284_p2[0:0] == 1'b1) ? tmp_30_cast_fu_298_p3 : tmp_26_cast_fu_251_p3);

assign select_ln52_8_fu_369_p3 = ((icmp_ln53_fu_284_p2[0:0] == 1'b1) ? tmp_30_cast_fu_298_p3 : tmp_26_cast_fu_251_p3);

assign select_ln52_fu_290_p3 = ((icmp_ln53_fu_284_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_j_load);

assign select_ln54_fu_603_p3 = ((trunc_ln52_1_reg_769_pp0_iter4_reg[0:0] == 1'b1) ? select_ln813_1_fu_589_p3 : select_ln813_fu_596_p3);

assign select_ln813_1_fu_589_p3 = ((trunc_ln54_reg_818_pp0_iter4_reg[0:0] == 1'b1) ? 12'd2457 : 12'd0);

assign select_ln813_fu_596_p3 = ((trunc_ln54_reg_818_pp0_iter4_reg[0:0] == 1'b1) ? 12'd0 : 12'd2457);

assign sext_ln1273_fu_408_p1 = tmp_34_cast_fu_382_p3;

assign sext_ln1347_1_fu_479_p1 = $signed(P_prior_V_load_2_reg_858);

assign sext_ln1347_2_fu_501_p1 = $signed(P_prior_V_load_3_reg_863_pp0_iter2_reg);

assign sext_ln1347_fu_470_p1 = $signed(P_prior_V_load_reg_853);

assign sext_ln813_fu_610_p1 = $signed(select_ln54_fu_603_p3);

assign sext_ln818_fu_461_p1 = $signed(P_prior_V_load_1_reg_848);

assign shl_ln838_2_fu_532_p3 = {{tmp_2_fu_522_p4}, {16'd0}};

assign shl_ln838_3_fu_567_p3 = {{tmp_3_reg_933}, {16'd0}};

assign shl_ln838_s_fu_510_p3 = {{tmp_s_reg_913}, {16'd0}};

assign tmp_26_cast_fu_251_p3 = {{trunc_ln1271_fu_247_p1}, {2'd0}};

assign tmp_2_fu_522_p4 = {{add_ln1347_fu_517_p2[47:16]}};

assign tmp_30_cast_fu_298_p3 = {{trunc_ln52_fu_280_p1}, {2'd0}};

assign tmp_34_cast_fu_382_p3 = {{1'd1}, {select_ln52_fu_290_p3}};

assign tmp_35_cast_fu_395_p3 = {{2'd2}, {select_ln52_fu_290_p3}};

assign trunc_ln1271_fu_247_p1 = ap_sig_allocacmp_i_4[0:0];

assign trunc_ln52_1_fu_314_p1 = select_ln52_1_fu_306_p3[0:0];

assign trunc_ln52_fu_280_p1 = add_ln52_fu_274_p2[0:0];

assign trunc_ln54_fu_417_p1 = select_ln52_fu_290_p3[0:0];

assign trunc_ln818_1_fu_579_p4 = {{add_ln1347_3_fu_574_p2[47:16]}};

assign zext_ln1271_2_fu_364_p1 = or_ln52_1_fu_358_p2;

assign zext_ln1271_3_fu_447_p1 = or_ln52_2_fu_442_p2;

assign zext_ln1271_fu_345_p1 = or_ln52_fu_339_p2;

assign zext_ln1273_2_fu_403_p1 = tmp_35_cast_fu_395_p3;

assign zext_ln1273_3_fu_412_p1 = $unsigned(sext_ln1273_fu_408_p1);

assign zext_ln1273_fu_390_p1 = $unsigned(tmp_34_cast_fu_382_p3);

assign zext_ln52_1_fu_452_p1 = H_load_reg_828;

assign zext_ln52_2_fu_455_p1 = H_load_2_reg_833;

assign zext_ln52_3_fu_458_p1 = H_load_3_reg_838;

assign zext_ln52_4_fu_488_p1 = H_load_4_reg_883;

assign zext_ln52_fu_326_p1 = select_ln52_2_fu_318_p3;

assign zext_ln813_fu_614_p1 = $unsigned(sext_ln813_fu_610_p1);

always @ (posedge ap_clk) begin
    select_ln52_8_reg_793[1:0] <= 2'b00;
end

endmodule //kalman_filter_top_kalman_filter_top_Pipeline_VITIS_LOOP_52_10_VITIS_LOOP_53_11
