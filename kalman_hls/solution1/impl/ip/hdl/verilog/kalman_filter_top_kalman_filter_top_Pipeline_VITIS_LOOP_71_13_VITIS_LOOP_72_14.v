// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kalman_filter_top_kalman_filter_top_Pipeline_VITIS_LOOP_71_13_VITIS_LOOP_72_14 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        P_prior_V_address0,
        P_prior_V_ce0,
        P_prior_V_q0,
        P_prior_V_address1,
        P_prior_V_ce1,
        P_prior_V_q1,
        K_V_address0,
        K_V_ce0,
        K_V_we0,
        K_V_d0,
        S_inv_V_0_1,
        S_inv_V_0_0,
        S_inv_V_1_1,
        S_inv_V_1_0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] P_prior_V_address0;
output   P_prior_V_ce0;
input  [31:0] P_prior_V_q0;
output  [3:0] P_prior_V_address1;
output   P_prior_V_ce1;
input  [31:0] P_prior_V_q1;
output  [2:0] K_V_address0;
output   K_V_ce0;
output   K_V_we0;
output  [31:0] K_V_d0;
input  [31:0] S_inv_V_0_1;
input  [31:0] S_inv_V_0_0;
input  [31:0] S_inv_V_1_1;
input  [31:0] S_inv_V_1_0;

reg ap_idle;
reg P_prior_V_ce0;
reg P_prior_V_ce1;
reg K_V_ce0;
reg K_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln71_fu_173_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] select_ln71_fu_204_p3;
reg   [1:0] select_ln71_reg_434;
reg   [1:0] select_ln71_reg_434_pp0_iter1_reg;
reg   [1:0] select_ln71_reg_434_pp0_iter2_reg;
reg   [1:0] select_ln71_reg_434_pp0_iter3_reg;
reg   [1:0] select_ln71_reg_434_pp0_iter4_reg;
reg   [1:0] select_ln71_reg_434_pp0_iter5_reg;
reg   [1:0] select_ln71_reg_434_pp0_iter6_reg;
wire   [2:0] select_ln71_1_fu_220_p3;
reg   [2:0] select_ln71_1_reg_439;
reg   [2:0] select_ln71_1_reg_439_pp0_iter1_reg;
reg   [2:0] select_ln71_1_reg_439_pp0_iter2_reg;
reg   [2:0] select_ln71_1_reg_439_pp0_iter3_reg;
reg   [2:0] select_ln71_1_reg_439_pp0_iter4_reg;
reg   [2:0] select_ln71_1_reg_439_pp0_iter5_reg;
reg   [2:0] select_ln71_1_reg_439_pp0_iter6_reg;
wire   [0:0] trunc_ln1273_fu_260_p1;
reg   [0:0] trunc_ln1273_reg_454;
reg   [0:0] trunc_ln1273_reg_454_pp0_iter1_reg;
reg   [31:0] P_prior_V_load_reg_460;
reg   [31:0] P_prior_V_load_1_reg_465;
wire   [63:0] grp_fu_331_p2;
reg   [63:0] mul_ln1273_2_reg_490;
reg   [31:0] tmp_s_reg_495;
wire   [63:0] zext_ln71_fu_236_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] select_ln71_3_cast_fu_255_p1;
wire   [63:0] zext_ln73_1_fu_361_p1;
reg   [1:0] j_fu_66;
wire   [1:0] add_ln72_fu_264_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_j_load;
reg   [2:0] i_fu_70;
reg   [2:0] ap_sig_allocacmp_i_3;
reg   [3:0] indvar_flatten36_fu_74;
wire   [3:0] add_ln71_1_fu_179_p2;
reg   [3:0] ap_sig_allocacmp_indvar_flatten36_load;
wire   [1:0] empty_fu_161_p1;
wire   [2:0] add_ln71_fu_188_p2;
wire   [0:0] icmp_ln72_fu_198_p2;
wire   [1:0] trunc_ln71_fu_194_p1;
wire   [3:0] tmp_42_cast_fu_212_p3;
wire   [3:0] tmp_40_cast_fu_165_p3;
wire   [3:0] select_ln71_2_fu_228_p3;
wire   [3:0] select_ln71_4_fu_241_p3;
wire   [3:0] or_ln71_fu_249_p2;
wire  signed [47:0] shl_ln1273_cast_mid2_v_fu_285_p3;
wire  signed [47:0] sext_ln72_mid2_v_fu_296_p3;
wire  signed [31:0] select_ln1273_fu_307_p3;
wire  signed [31:0] select_ln1273_1_fu_322_p3;
wire   [63:0] grp_fu_316_p2;
wire   [2:0] shl_ln73_fu_347_p2;
wire   [2:0] zext_ln73_fu_352_p1;
wire   [2:0] add_ln73_fu_355_p2;
wire   [63:0] shl_ln838_s_fu_366_p3;
wire   [63:0] add_ln1347_fu_373_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

kalman_filter_top_mul_48s_32s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 48 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_48s_32s_64_5_1_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shl_ln1273_cast_mid2_v_fu_285_p3),
    .din1(select_ln1273_fu_307_p3),
    .ce(1'b1),
    .dout(grp_fu_316_p2)
);

kalman_filter_top_mul_48s_32s_64_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 48 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_48s_32s_64_5_1_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sext_ln72_mid2_v_fu_296_p3),
    .din1(select_ln1273_1_fu_322_p3),
    .ce(1'b1),
    .dout(grp_fu_331_p2)
);

kalman_filter_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln71_fu_173_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_70 <= select_ln71_1_fu_220_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_70 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln71_fu_173_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten36_fu_74 <= add_ln71_1_fu_179_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten36_fu_74 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln71_fu_173_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_66 <= add_ln72_fu_264_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_66 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        P_prior_V_load_1_reg_465 <= P_prior_V_q0;
        P_prior_V_load_reg_460 <= P_prior_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln71_1_reg_439_pp0_iter1_reg <= select_ln71_1_reg_439;
        select_ln71_reg_434_pp0_iter1_reg <= select_ln71_reg_434;
        trunc_ln1273_reg_454_pp0_iter1_reg <= trunc_ln1273_reg_454;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        mul_ln1273_2_reg_490 <= grp_fu_331_p2;
        select_ln71_1_reg_439_pp0_iter2_reg <= select_ln71_1_reg_439_pp0_iter1_reg;
        select_ln71_1_reg_439_pp0_iter3_reg <= select_ln71_1_reg_439_pp0_iter2_reg;
        select_ln71_1_reg_439_pp0_iter4_reg <= select_ln71_1_reg_439_pp0_iter3_reg;
        select_ln71_1_reg_439_pp0_iter5_reg <= select_ln71_1_reg_439_pp0_iter4_reg;
        select_ln71_1_reg_439_pp0_iter6_reg <= select_ln71_1_reg_439_pp0_iter5_reg;
        select_ln71_reg_434_pp0_iter2_reg <= select_ln71_reg_434_pp0_iter1_reg;
        select_ln71_reg_434_pp0_iter3_reg <= select_ln71_reg_434_pp0_iter2_reg;
        select_ln71_reg_434_pp0_iter4_reg <= select_ln71_reg_434_pp0_iter3_reg;
        select_ln71_reg_434_pp0_iter5_reg <= select_ln71_reg_434_pp0_iter4_reg;
        select_ln71_reg_434_pp0_iter6_reg <= select_ln71_reg_434_pp0_iter5_reg;
        tmp_s_reg_495 <= {{grp_fu_316_p2[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln71_fu_173_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln71_1_reg_439 <= select_ln71_1_fu_220_p3;
        select_ln71_reg_434 <= select_ln71_fu_204_p3;
        trunc_ln1273_reg_454 <= trunc_ln1273_fu_260_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        K_V_ce0 = 1'b1;
    end else begin
        K_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        K_V_we0 = 1'b1;
    end else begin
        K_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        P_prior_V_ce0 = 1'b1;
    end else begin
        P_prior_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        P_prior_V_ce1 = 1'b1;
    end else begin
        P_prior_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln71_fu_173_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_3 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten36_load = 4'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten36_load = indvar_flatten36_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 2'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_66;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign K_V_address0 = zext_ln73_1_fu_361_p1;

assign K_V_d0 = {{add_ln1347_fu_373_p2[63:32]}};

assign P_prior_V_address0 = select_ln71_3_cast_fu_255_p1;

assign P_prior_V_address1 = zext_ln71_fu_236_p1;

assign add_ln1347_fu_373_p2 = (shl_ln838_s_fu_366_p3 + mul_ln1273_2_reg_490);

assign add_ln71_1_fu_179_p2 = (ap_sig_allocacmp_indvar_flatten36_load + 4'd1);

assign add_ln71_fu_188_p2 = (ap_sig_allocacmp_i_3 + 3'd1);

assign add_ln72_fu_264_p2 = (select_ln71_fu_204_p3 + 2'd1);

assign add_ln73_fu_355_p2 = (shl_ln73_fu_347_p2 + zext_ln73_fu_352_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_161_p1 = ap_sig_allocacmp_i_3[1:0];

assign icmp_ln71_fu_173_p2 = ((ap_sig_allocacmp_indvar_flatten36_load == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_198_p2 = ((ap_sig_allocacmp_j_load == 2'd2) ? 1'b1 : 1'b0);

assign or_ln71_fu_249_p2 = (select_ln71_4_fu_241_p3 | 4'd1);

assign select_ln1273_1_fu_322_p3 = ((trunc_ln1273_reg_454_pp0_iter1_reg[0:0] == 1'b1) ? S_inv_V_1_1 : S_inv_V_1_0);

assign select_ln1273_fu_307_p3 = ((trunc_ln1273_reg_454_pp0_iter1_reg[0:0] == 1'b1) ? S_inv_V_0_1 : S_inv_V_0_0);

assign select_ln71_1_fu_220_p3 = ((icmp_ln72_fu_198_p2[0:0] == 1'b1) ? add_ln71_fu_188_p2 : ap_sig_allocacmp_i_3);

assign select_ln71_2_fu_228_p3 = ((icmp_ln72_fu_198_p2[0:0] == 1'b1) ? tmp_42_cast_fu_212_p3 : tmp_40_cast_fu_165_p3);

assign select_ln71_3_cast_fu_255_p1 = or_ln71_fu_249_p2;

assign select_ln71_4_fu_241_p3 = ((icmp_ln72_fu_198_p2[0:0] == 1'b1) ? tmp_42_cast_fu_212_p3 : tmp_40_cast_fu_165_p3);

assign select_ln71_fu_204_p3 = ((icmp_ln72_fu_198_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_j_load);

assign sext_ln72_mid2_v_fu_296_p3 = {{P_prior_V_load_1_reg_465}, {16'd0}};

assign shl_ln1273_cast_mid2_v_fu_285_p3 = {{P_prior_V_load_reg_460}, {16'd0}};

assign shl_ln73_fu_347_p2 = select_ln71_1_reg_439_pp0_iter6_reg << 3'd1;

assign shl_ln838_s_fu_366_p3 = {{tmp_s_reg_495}, {32'd0}};

assign tmp_40_cast_fu_165_p3 = {{empty_fu_161_p1}, {2'd0}};

assign tmp_42_cast_fu_212_p3 = {{trunc_ln71_fu_194_p1}, {2'd0}};

assign trunc_ln1273_fu_260_p1 = select_ln71_fu_204_p3[0:0];

assign trunc_ln71_fu_194_p1 = add_ln71_fu_188_p2[1:0];

assign zext_ln71_fu_236_p1 = select_ln71_2_fu_228_p3;

assign zext_ln73_1_fu_361_p1 = add_ln73_fu_355_p2;

assign zext_ln73_fu_352_p1 = select_ln71_reg_434_pp0_iter6_reg;

endmodule //kalman_filter_top_kalman_filter_top_Pipeline_VITIS_LOOP_71_13_VITIS_LOOP_72_14
