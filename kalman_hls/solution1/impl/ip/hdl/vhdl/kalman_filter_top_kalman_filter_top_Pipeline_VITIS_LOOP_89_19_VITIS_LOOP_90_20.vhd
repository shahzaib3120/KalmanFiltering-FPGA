-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kalman_filter_top_kalman_filter_top_Pipeline_VITIS_LOOP_89_19_VITIS_LOOP_90_20 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    K_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    K_V_ce0 : OUT STD_LOGIC;
    K_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    K_V_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    K_V_ce1 : OUT STD_LOGIC;
    K_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    temp_V_ce0 : OUT STD_LOGIC;
    temp_V_we0 : OUT STD_LOGIC;
    temp_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    H_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    H_ce0 : OUT STD_LOGIC;
    H_q0 : IN STD_LOGIC_VECTOR (16 downto 0);
    H_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    H_ce1 : OUT STD_LOGIC;
    H_q1 : IN STD_LOGIC_VECTOR (16 downto 0) );
end;


architecture behav of kalman_filter_top_kalman_filter_top_Pipeline_VITIS_LOOP_89_19_VITIS_LOOP_90_20 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln89_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln89_fu_183_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln89_reg_381 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln89_reg_381_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln89_reg_381_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln89_reg_381_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln91_fu_205_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln91_reg_386 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln91_reg_386_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln91_reg_386_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln91_reg_386_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal K_V_load_reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal K_V_load_1_reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal H_load_reg_421 : STD_LOGIC_VECTOR (16 downto 0);
    signal H_load_1_reg_426 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_296_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln1347_reg_451 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_1_reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln89_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1271_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_4_cast_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1273_1_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln91_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_54 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln90_fu_257_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (2 downto 0);
    signal i_fu_58 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln89_1_fu_197_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten45_fu_62 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln89_1_fu_162_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_indvar_flatten45_load : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln90_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln89_fu_171_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln1271_1_fu_191_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln1271_fu_150_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln89_2_fu_209_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln89_4_fu_222_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln89_fu_230_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln1273_fu_246_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_287_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_296_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_287_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_s_fu_312_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1273_fu_319_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln91_fu_322_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln838_s_fu_333_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln1347_fu_340_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_287_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_296_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component kalman_filter_top_mul_17ns_32s_48_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component kalman_filter_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_17ns_32s_48_2_1_U80 : component kalman_filter_top_mul_17ns_32s_48_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 17,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_287_p0,
        din1 => K_V_load_reg_411,
        ce => ap_const_logic_1,
        dout => grp_fu_287_p2);

    mul_17ns_32s_48_2_1_U81 : component kalman_filter_top_mul_17ns_32s_48_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 17,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_296_p0,
        din1 => K_V_load_1_reg_416,
        ce => ap_const_logic_1,
        dout => grp_fu_296_p2);

    flow_control_loop_pipe_sequential_init_U : component kalman_filter_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln89_fu_156_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_58 <= select_ln89_1_fu_197_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_58 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten45_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln89_fu_156_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten45_fu_62 <= add_ln89_1_fu_162_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten45_fu_62 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln89_fu_156_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_54 <= add_ln90_fu_257_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_54 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                H_load_1_reg_426 <= H_q0;
                H_load_reg_421 <= H_q1;
                K_V_load_1_reg_416 <= K_V_q0;
                K_V_load_reg_411 <= K_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                select_ln89_reg_381_pp0_iter1_reg <= select_ln89_reg_381;
                trunc_ln91_reg_386_pp0_iter1_reg <= trunc_ln91_reg_386;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                mul_ln1347_reg_451 <= grp_fu_296_p2;
                select_ln89_reg_381_pp0_iter2_reg <= select_ln89_reg_381_pp0_iter1_reg;
                select_ln89_reg_381_pp0_iter3_reg <= select_ln89_reg_381_pp0_iter2_reg;
                tmp_1_reg_456 <= grp_fu_287_p2(47 downto 16);
                trunc_ln91_reg_386_pp0_iter2_reg <= trunc_ln91_reg_386_pp0_iter1_reg;
                trunc_ln91_reg_386_pp0_iter3_reg <= trunc_ln91_reg_386_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_fu_156_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln89_reg_381 <= select_ln89_fu_183_p3;
                trunc_ln91_reg_386 <= trunc_ln91_fu_205_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    H_address0 <= zext_ln1273_1_fu_252_p1(3 - 1 downto 0);
    H_address1 <= j_4_cast_fu_241_p1(3 - 1 downto 0);

    H_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            H_ce0 <= ap_const_logic_1;
        else 
            H_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    H_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            H_ce1 <= ap_const_logic_1;
        else 
            H_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    K_V_address0 <= zext_ln1271_fu_236_p1(3 - 1 downto 0);
    K_V_address1 <= zext_ln89_fu_217_p1(3 - 1 downto 0);

    K_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            K_V_ce0 <= ap_const_logic_1;
        else 
            K_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    K_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            K_V_ce1 <= ap_const_logic_1;
        else 
            K_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1347_fu_340_p2 <= std_logic_vector(unsigned(shl_ln838_s_fu_333_p3) + unsigned(mul_ln1347_reg_451));
    add_ln89_1_fu_162_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten45_load) + unsigned(ap_const_lv5_1));
    add_ln89_fu_171_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv3_1));
    add_ln90_fu_257_p2 <= std_logic_vector(unsigned(select_ln89_fu_183_p3) + unsigned(ap_const_lv3_1));
    add_ln91_fu_322_p2 <= std_logic_vector(unsigned(tmp_s_fu_312_p3) + unsigned(zext_ln1273_fu_319_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln89_fu_156_p2)
    begin
        if (((icmp_ln89_fu_156_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_58)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_58;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten45_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten45_fu_62)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten45_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvar_flatten45_load <= indvar_flatten45_fu_62;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_54, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_54;
        end if; 
    end process;

    grp_fu_287_p0 <= grp_fu_287_p00(17 - 1 downto 0);
    grp_fu_287_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(H_load_reg_421),48));
    grp_fu_296_p0 <= grp_fu_296_p00(17 - 1 downto 0);
    grp_fu_296_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(H_load_1_reg_426),48));
    icmp_ln89_fu_156_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten45_load = ap_const_lv5_10) else "0";
    icmp_ln90_fu_177_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv3_4) else "0";
    j_4_cast_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln89_fu_183_p3),64));
    or_ln89_fu_230_p2 <= (select_ln89_4_fu_222_p3 or ap_const_lv3_1);
    select_ln89_1_fu_197_p3 <= 
        add_ln89_fu_171_p2 when (icmp_ln90_fu_177_p2(0) = '1') else 
        ap_sig_allocacmp_i_1;
    select_ln89_2_fu_209_p3 <= 
        shl_ln1271_1_fu_191_p2 when (icmp_ln90_fu_177_p2(0) = '1') else 
        shl_ln1271_fu_150_p2;
    select_ln89_4_fu_222_p3 <= 
        shl_ln1271_1_fu_191_p2 when (icmp_ln90_fu_177_p2(0) = '1') else 
        shl_ln1271_fu_150_p2;
    select_ln89_fu_183_p3 <= 
        ap_const_lv3_0 when (icmp_ln90_fu_177_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    shl_ln1271_1_fu_191_p2 <= std_logic_vector(shift_left(unsigned(add_ln89_fu_171_p2),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    shl_ln1271_fu_150_p2 <= std_logic_vector(shift_left(unsigned(ap_sig_allocacmp_i_1),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    shl_ln838_s_fu_333_p3 <= (tmp_1_reg_456 & ap_const_lv16_0);
    temp_V_address0 <= zext_ln91_fu_328_p1(4 - 1 downto 0);

    temp_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            temp_V_ce0 <= ap_const_logic_1;
        else 
            temp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_V_d0 <= add_ln1347_fu_340_p2(47 downto 16);

    temp_V_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            temp_V_we0 <= ap_const_logic_1;
        else 
            temp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_312_p3 <= (trunc_ln91_reg_386_pp0_iter3_reg & ap_const_lv2_0);
    trunc_ln91_fu_205_p1 <= select_ln89_1_fu_197_p3(2 - 1 downto 0);
    xor_ln1273_fu_246_p2 <= (select_ln89_fu_183_p3 xor ap_const_lv3_4);
    zext_ln1271_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln89_fu_230_p2),64));
    zext_ln1273_1_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln1273_fu_246_p2),64));
    zext_ln1273_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln89_reg_381_pp0_iter3_reg),4));
    zext_ln89_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln89_2_fu_209_p3),64));
    zext_ln91_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_fu_322_p2),64));
end behav;
